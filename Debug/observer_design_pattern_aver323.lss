
observer_design_pattern_aver323.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000295e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a8  00800060  0000295e  000029f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800108  00800108  00002a9a  2**0
                  ALLOC
  3 .stab         00003ff0  00000000  00000000  00002a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002c59  00000000  00000000  00006a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000096e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009825  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009995  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b5de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c4c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d278  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d665  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000de33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e0 13 	jmp	0x27c0	; 0x27c0 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 30       	cpi	r26, 0x08	; 8
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e0       	ldi	r26, 0x08	; 8
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 31       	cpi	r26, 0x1F	; 31
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1c 14 	call	0x2838	; 0x2838 <main>
      8a:	0c 94 ad 14 	jmp	0x295a	; 0x295a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 31 14 	jmp	0x2862	; 0x2862 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4d 14 	jmp	0x289a	; 0x289a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 31 14 	jmp	0x2862	; 0x2862 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4d 14 	jmp	0x289a	; 0x289a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 41 14 	jmp	0x2882	; 0x2882 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 5d 14 	jmp	0x28ba	; 0x28ba <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_9>:

/* Global variables to hold the address of the call back function in the application */
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

ISR (TIMER0_OVF_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     b70:	80 91 08 01 	lds	r24, 0x0108
     b74:	90 91 09 01 	lds	r25, 0x0109
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	29 f0       	breq	.+10     	; 0xb86 <__vector_9+0x40>
		{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     b7c:	e0 91 08 01 	lds	r30, 0x0108
     b80:	f0 91 09 01 	lds	r31, 0x0109
     b84:	09 95       	icall
		}
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <__vector_19>:

ISR (TIMER0_COMP_vect)
{
     bac:	1f 92       	push	r1
     bae:	0f 92       	push	r0
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	0f 92       	push	r0
     bb4:	11 24       	eor	r1, r1
     bb6:	2f 93       	push	r18
     bb8:	3f 93       	push	r19
     bba:	4f 93       	push	r20
     bbc:	5f 93       	push	r21
     bbe:	6f 93       	push	r22
     bc0:	7f 93       	push	r23
     bc2:	8f 93       	push	r24
     bc4:	9f 93       	push	r25
     bc6:	af 93       	push	r26
     bc8:	bf 93       	push	r27
     bca:	ef 93       	push	r30
     bcc:	ff 93       	push	r31
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     bd6:	80 91 08 01 	lds	r24, 0x0108
     bda:	90 91 09 01 	lds	r25, 0x0109
     bde:	00 97       	sbiw	r24, 0x00	; 0
     be0:	29 f0       	breq	.+10     	; 0xbec <__vector_19+0x40>
		{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     be2:	e0 91 08 01 	lds	r30, 0x0108
     be6:	f0 91 09 01 	lds	r31, 0x0109
     bea:	09 95       	icall
		}
}
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	ff 91       	pop	r31
     bf2:	ef 91       	pop	r30
     bf4:	bf 91       	pop	r27
     bf6:	af 91       	pop	r26
     bf8:	9f 91       	pop	r25
     bfa:	8f 91       	pop	r24
     bfc:	7f 91       	pop	r23
     bfe:	6f 91       	pop	r22
     c00:	5f 91       	pop	r21
     c02:	4f 91       	pop	r20
     c04:	3f 91       	pop	r19
     c06:	2f 91       	pop	r18
     c08:	0f 90       	pop	r0
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	0f 90       	pop	r0
     c0e:	1f 90       	pop	r1
     c10:	18 95       	reti

00000c12 <Timer0_init>:

void Timer0_init(const Timer0_ConfigType *Config_ptr)
{
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	00 d0       	rcall	.+0      	; 0xc18 <Timer0_init+0x6>
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Config_ptr->initialValue;
     c20:	a2 e5       	ldi	r26, 0x52	; 82
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	e9 81       	ldd	r30, Y+1	; 0x01
     c26:	fa 81       	ldd	r31, Y+2	; 0x02
     c28:	82 81       	ldd	r24, Z+2	; 0x02
     c2a:	8c 93       	st	X, r24
	if (Config_ptr->mode == NORMAL_MODE)
     c2c:	e9 81       	ldd	r30, Y+1	; 0x01
     c2e:	fa 81       	ldd	r31, Y+2	; 0x02
     c30:	80 81       	ld	r24, Z
     c32:	88 23       	and	r24, r24
     c34:	d9 f4       	brne	.+54     	; 0xc6c <Timer0_init+0x5a>
	{
		TCCR0|=(1<<FOC0);
     c36:	a3 e5       	ldi	r26, 0x53	; 83
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	e3 e5       	ldi	r30, 0x53	; 83
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	80 68       	ori	r24, 0x80	; 128
     c42:	8c 93       	st	X, r24
		TIMSK|=(1<<TOIE0);
     c44:	a9 e5       	ldi	r26, 0x59	; 89
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e9 e5       	ldi	r30, 0x59	; 89
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	81 60       	ori	r24, 0x01	; 1
     c50:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xF8) | (Config_ptr->clock);
     c52:	a3 e5       	ldi	r26, 0x53	; 83
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	e3 e5       	ldi	r30, 0x53	; 83
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	98 2f       	mov	r25, r24
     c5e:	98 7f       	andi	r25, 0xF8	; 248
     c60:	e9 81       	ldd	r30, Y+1	; 0x01
     c62:	fa 81       	ldd	r31, Y+2	; 0x02
     c64:	81 81       	ldd	r24, Z+1	; 0x01
     c66:	89 2b       	or	r24, r25
     c68:	8c 93       	st	X, r24
     c6a:	2c c0       	rjmp	.+88     	; 0xcc4 <Timer0_init+0xb2>
	}
	else if (Config_ptr->mode == COMPARE_MODE)
     c6c:	e9 81       	ldd	r30, Y+1	; 0x01
     c6e:	fa 81       	ldd	r31, Y+2	; 0x02
     c70:	80 81       	ld	r24, Z
     c72:	82 30       	cpi	r24, 0x02	; 2
     c74:	39 f5       	brne	.+78     	; 0xcc4 <Timer0_init+0xb2>
	{
		TCCR0 |= (1 << FOC0);
     c76:	a3 e5       	ldi	r26, 0x53	; 83
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e3 e5       	ldi	r30, 0x53	; 83
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	80 68       	ori	r24, 0x80	; 128
     c82:	8c 93       	st	X, r24
		TCCR0 |= (1 << WGM01);
     c84:	a3 e5       	ldi	r26, 0x53	; 83
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e3 e5       	ldi	r30, 0x53	; 83
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	88 60       	ori	r24, 0x08	; 8
     c90:	8c 93       	st	X, r24
		TIMSK |= (1 << OCIE0);
     c92:	a9 e5       	ldi	r26, 0x59	; 89
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	e9 e5       	ldi	r30, 0x59	; 89
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	82 60       	ori	r24, 0x02	; 2
     c9e:	8c 93       	st	X, r24
		OCR0 = Config_ptr->compareValue;
     ca0:	ac e5       	ldi	r26, 0x5C	; 92
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	e9 81       	ldd	r30, Y+1	; 0x01
     ca6:	fa 81       	ldd	r31, Y+2	; 0x02
     ca8:	83 81       	ldd	r24, Z+3	; 0x03
     caa:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xF8) | (Config_ptr->clock);
     cac:	a3 e5       	ldi	r26, 0x53	; 83
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e3 e5       	ldi	r30, 0x53	; 83
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	98 2f       	mov	r25, r24
     cb8:	98 7f       	andi	r25, 0xF8	; 248
     cba:	e9 81       	ldd	r30, Y+1	; 0x01
     cbc:	fa 81       	ldd	r31, Y+2	; 0x02
     cbe:	81 81       	ldd	r24, Z+1	; 0x01
     cc0:	89 2b       	or	r24, r25
     cc2:	8c 93       	st	X, r24
	}
}
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	cf 91       	pop	r28
     cca:	df 91       	pop	r29
     ccc:	08 95       	ret

00000cce <Timer0_setCallBack>:

void Timer0_setCallBack( void(*a_ptr)(void) )
{
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	00 d0       	rcall	.+0      	; 0xcd4 <Timer0_setCallBack+0x6>
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	9a 83       	std	Y+2, r25	; 0x02
     cda:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=a_ptr;
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
     cde:	9a 81       	ldd	r25, Y+2	; 0x02
     ce0:	90 93 09 01 	sts	0x0109, r25
     ce4:	80 93 08 01 	sts	0x0108, r24
}
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	cf 91       	pop	r28
     cee:	df 91       	pop	r29
     cf0:	08 95       	ret

00000cf2 <Timer0_DeInit>:

void Timer0_DeInit(void)
{
     cf2:	df 93       	push	r29
     cf4:	cf 93       	push	r28
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;
     cfa:	e3 e5       	ldi	r30, 0x53	; 83
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	10 82       	st	Z, r1
	TIMSK=0;
     d00:	e9 e5       	ldi	r30, 0x59	; 89
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	10 82       	st	Z, r1
//	g_callBackPtr=NULL_PTR;
}
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <EnableInterrupt>:

void EnableInterrupt(void){}
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	08 95       	ret

00000d1a <DisableInterrupt>:


void DisableInterrupt(void){}
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	cf 91       	pop	r28
     d24:	df 91       	pop	r29
     d26:	08 95       	ret

00000d28 <SPI_initMaster>:
/*
 * Description :
 * Initialize the SPI device as Master.
 */
void SPI_initMaster(void) 
{
     d28:	df 93       	push	r29
     d2a:	cf 93       	push	r28
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Output
	 * MOSI(PB5) --> Output 
	 * MISO(PB6) --> Input
	 * SCK(PB7) --> Output
	 ********************************************/
	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_OUTPUT);
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	64 e0       	ldi	r22, 0x04	; 4
     d34:	41 e0       	ldi	r20, 0x01	; 1
     d36:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_OUTPUT);
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	65 e0       	ldi	r22, 0x05	; 5
     d3e:	41 e0       	ldi	r20, 0x01	; 1
     d40:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_INPUT);
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	66 e0       	ldi	r22, 0x06	; 6
     d48:	40 e0       	ldi	r20, 0x00	; 0
     d4a:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_OUTPUT);
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	67 e0       	ldi	r22, 0x07	; 7
     d52:	41 e0       	ldi	r20, 0x01	; 1
     d54:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>
     * MSTR    = 1 Enable Master
     * CPOL    = 0 SCK is low when idle
     * CPHA    = 0 Sample Data with the raising edge
     * SPR1:0  = 00 Choose SPI clock = Fosc/4
     ***********************************************************************/
	SPCR = (1<<SPE) | (1<<MSTR)| (1<<CPHA);
     d58:	ed e2       	ldi	r30, 0x2D	; 45
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	84 e5       	ldi	r24, 0x54	; 84
     d5e:	80 83       	st	Z, r24

	/* Clear the SPI2X bit in SPSR to Choose SPI clock = Fosc/4 */
	SPSR &= ~(1<<SPI2X);
     d60:	ae e2       	ldi	r26, 0x2E	; 46
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	ee e2       	ldi	r30, 0x2E	; 46
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	8e 7f       	andi	r24, 0xFE	; 254
     d6c:	8c 93       	st	X, r24
}
     d6e:	cf 91       	pop	r28
     d70:	df 91       	pop	r29
     d72:	08 95       	ret

00000d74 <SPI_initSlave>:
/*
 * Description :
 * Initialize the SPI device as Slave.
 */
void SPI_initSlave(void)
{ 
     d74:	df 93       	push	r29
     d76:	cf 93       	push	r28
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Input
	 * MOSI(PB5) --> Input
	 * MISO(PB6) --> Output
	 * SCK(PB7) --> Input
	 ********************************************/
	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_INPUT);
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	64 e0       	ldi	r22, 0x04	; 4
     d80:	40 e0       	ldi	r20, 0x00	; 0
     d82:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_INPUT);
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	65 e0       	ldi	r22, 0x05	; 5
     d8a:	40 e0       	ldi	r20, 0x00	; 0
     d8c:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_OUTPUT);
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	66 e0       	ldi	r22, 0x06	; 6
     d94:	41 e0       	ldi	r20, 0x01	; 1
     d96:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_INPUT);
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	67 e0       	ldi	r22, 0x07	; 7
     d9e:	40 e0       	ldi	r20, 0x00	; 0
     da0:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>
	 * MSTR    = 0 Disable Master
	 * CPOL    = 0 SCK is low when idle
	 * CPHA    = 0 Sample Data with the raising edge
	 * SPR1:0  = 00 Choose SPI clock = Fosc/4
	 ***********************************************************************/
	SPCR = (1<<SPE);
     da4:	ed e2       	ldi	r30, 0x2D	; 45
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 e4       	ldi	r24, 0x40	; 64
     daa:	80 83       	st	Z, r24

	/* Clear the SPI2X bit in SPSR to Choose SPI clock = Fosc/4 */
	SPSR &= ~(1<<SPI2X);
     dac:	ae e2       	ldi	r26, 0x2E	; 46
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	ee e2       	ldi	r30, 0x2E	; 46
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	8e 7f       	andi	r24, 0xFE	; 254
     db8:	8c 93       	st	X, r24
}
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	08 95       	ret

00000dc0 <SPI_sendReceiveByte>:
 * Description :
 * Send the required data through SPI to the other SPI device.
 * In the same time data will be received from the other device.
 */
uint8 SPI_sendReceiveByte(uint8 data)
{
     dc0:	df 93       	push	r29
     dc2:	cf 93       	push	r28
     dc4:	0f 92       	push	r0
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	89 83       	std	Y+1, r24	; 0x01
	/* Initiate the communication and send data by SPI */
	SPDR = data;
     dcc:	ef e2       	ldi	r30, 0x2F	; 47
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	80 83       	st	Z, r24

	/* Wait until SPI interrupt flag SPIF = 1 (data has been sent/received correctly) */
	while(BIT_IS_CLEAR(SPSR,SPIF)){}
     dd4:	ee e2       	ldi	r30, 0x2E	; 46
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	88 23       	and	r24, r24
     ddc:	dc f7       	brge	.-10     	; 0xdd4 <SPI_sendReceiveByte+0x14>

	/*
	 * Note: SPIF flag is cleared by first reading SPSR (with SPIF set) which is done in the previous step.
	 * and then accessing SPDR like the below line.
	 */
	return SPDR;
     dde:	ef e2       	ldi	r30, 0x2F	; 47
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
}
     de4:	0f 90       	pop	r0
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	08 95       	ret

00000dec <SPI_sendString>:
/*
 * Description :
 * Send the required string through SPI to the other SPI device.
 */
void SPI_sendString(const uint8 *str)
{
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	00 d0       	rcall	.+0      	; 0xdf2 <SPI_sendString+0x6>
     df2:	00 d0       	rcall	.+0      	; 0xdf4 <SPI_sendString+0x8>
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	9c 83       	std	Y+4, r25	; 0x04
     dfa:	8b 83       	std	Y+3, r24	; 0x03
	uint8 i = 0;
     dfc:	1a 82       	std	Y+2, r1	; 0x02
	uint8 received_data = 0;
     dfe:	19 82       	std	Y+1, r1	; 0x01
     e00:	0f c0       	rjmp	.+30     	; 0xe20 <SPI_sendString+0x34>
	{
		/*
		 * received_data contains the received data from the other device.
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	8b 81       	ldd	r24, Y+3	; 0x03
     e0a:	9c 81       	ldd	r25, Y+4	; 0x04
     e0c:	fc 01       	movw	r30, r24
     e0e:	e2 0f       	add	r30, r18
     e10:	f3 1f       	adc	r31, r19
     e12:	80 81       	ld	r24, Z
     e14:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_sendReceiveByte>
     e18:	89 83       	std	Y+1, r24	; 0x01
		i++;
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	8f 5f       	subi	r24, 0xFF	; 255
     e1e:	8a 83       	std	Y+2, r24	; 0x02
{
	uint8 i = 0;
	uint8 received_data = 0;

	/* Send the whole string */
	while(str[i] != '\0')
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	8b 81       	ldd	r24, Y+3	; 0x03
     e28:	9c 81       	ldd	r25, Y+4	; 0x04
     e2a:	fc 01       	movw	r30, r24
     e2c:	e2 0f       	add	r30, r18
     e2e:	f3 1f       	adc	r31, r19
     e30:	80 81       	ld	r24, Z
     e32:	88 23       	and	r24, r24
     e34:	31 f7       	brne	.-52     	; 0xe02 <SPI_sendString+0x16>
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
		i++;
	}
}
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	08 95       	ret

00000e44 <SPI_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through SPI from the other SPI device.
 */
void SPI_receiveString(uint8 *str)
{
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	00 d0       	rcall	.+0      	; 0xe4e <SPI_receiveString+0xa>
     e4e:	0f 92       	push	r0
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	9b 83       	std	Y+3, r25	; 0x03
     e56:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     e58:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	9b 81       	ldd	r25, Y+3	; 0x03
     e64:	8c 01       	movw	r16, r24
     e66:	02 0f       	add	r16, r18
     e68:	13 1f       	adc	r17, r19
     e6a:	8f ef       	ldi	r24, 0xFF	; 255
     e6c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_sendReceiveByte>
     e70:	f8 01       	movw	r30, r16
     e72:	80 83       	st	Z, r24
     e74:	10 c0       	rjmp	.+32     	; 0xe96 <SPI_receiveString+0x52>

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
	{
		i++;
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	8f 5f       	subi	r24, 0xFF	; 255
     e7a:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	9b 81       	ldd	r25, Y+3	; 0x03
     e86:	8c 01       	movw	r16, r24
     e88:	02 0f       	add	r16, r18
     e8a:	13 1f       	adc	r17, r19
     e8c:	8f ef       	ldi	r24, 0xFF	; 255
     e8e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_sendReceiveByte>
     e92:	f8 01       	movw	r30, r16
     e94:	80 83       	st	Z, r24

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	9b 81       	ldd	r25, Y+3	; 0x03
     ea0:	fc 01       	movw	r30, r24
     ea2:	e2 0f       	add	r30, r18
     ea4:	f3 1f       	adc	r31, r19
     ea6:	80 81       	ld	r24, Z
     ea8:	83 32       	cpi	r24, 0x23	; 35
     eaa:	29 f7       	brne	.-54     	; 0xe76 <SPI_receiveString+0x32>
		i++;
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	str[i] = '\0';
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	8a 81       	ldd	r24, Y+2	; 0x02
     eb4:	9b 81       	ldd	r25, Y+3	; 0x03
     eb6:	fc 01       	movw	r30, r24
     eb8:	e2 0f       	add	r30, r18
     eba:	f3 1f       	adc	r31, r19
     ebc:	10 82       	st	Z, r1
}
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	1f 91       	pop	r17
     eca:	0f 91       	pop	r16
     ecc:	08 95       	ret

00000ece <PWM_Timer2_Start>:
#include "pwm.h"


void PWM_Timer2_Start(uint8 duty_cycle){
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	0f 92       	push	r0
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	89 83       	std	Y+1, r24	; 0x01
	 * FOC0=0 PWM MODE
	 * WGM00 & WGM01 =1 FAST PWM
	 * COM01 =1 NON INVERTING MODE
	 * CS01=1 PRESCALER 8
	 * */
	TCCR2=(1<<WGM21)|(1<<WGM20)|(1<<COM21)|(1<<CS21);
     eda:	e5 e4       	ldi	r30, 0x45	; 69
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	8a e6       	ldi	r24, 0x6A	; 106
     ee0:	80 83       	st	Z, r24
	OCR2=duty_cycle;
     ee2:	e3 e4       	ldi	r30, 0x43	; 67
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	80 83       	st	Z, r24

}
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_Init>:
 * Description :
 * configure every pin in the gpio.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_Init(const GPIO_ConfigType GPIO_ConfigPtr[])
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_Init+0x6>
     ef8:	0f 92       	push	r0
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	9b 83       	std	Y+3, r25	; 0x03
     f00:	8a 83       	std	Y+2, r24	; 0x02
    uint8 i = 0;
     f02:	19 82       	std	Y+1, r1	; 0x01
     f04:	ca c0       	rjmp	.+404    	; 0x109a <GPIO_Init+0x1a8>
    for (; i < TOTAL_PINS_NUM; ++i)
    {
	if(((GPIO_ConfigPtr[i].pin_num) >= NUM_OF_PINS_PER_PORT) || ((GPIO_ConfigPtr[i].port_num )>= NUM_OF_PORTS) )
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	c9 01       	movw	r24, r18
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	28 0f       	add	r18, r24
     f18:	39 1f       	adc	r19, r25
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	9b 81       	ldd	r25, Y+3	; 0x03
     f1e:	fc 01       	movw	r30, r24
     f20:	e2 0f       	add	r30, r18
     f22:	f3 1f       	adc	r31, r19
     f24:	81 81       	ldd	r24, Z+1	; 0x01
     f26:	88 30       	cpi	r24, 0x08	; 8
     f28:	08 f0       	brcs	.+2      	; 0xf2c <GPIO_Init+0x3a>
     f2a:	b4 c0       	rjmp	.+360    	; 0x1094 <GPIO_Init+0x1a2>
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	c9 01       	movw	r24, r18
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	28 0f       	add	r18, r24
     f3e:	39 1f       	adc	r19, r25
     f40:	8a 81       	ldd	r24, Y+2	; 0x02
     f42:	9b 81       	ldd	r25, Y+3	; 0x03
     f44:	fc 01       	movw	r30, r24
     f46:	e2 0f       	add	r30, r18
     f48:	f3 1f       	adc	r31, r19
     f4a:	80 81       	ld	r24, Z
     f4c:	84 30       	cpi	r24, 0x04	; 4
     f4e:	08 f0       	brcs	.+2      	; 0xf52 <GPIO_Init+0x60>
     f50:	a1 c0       	rjmp	.+322    	; 0x1094 <GPIO_Init+0x1a2>
		/* Do Nothing */
	}
	else
	{

		GPIO_setupPinDirection(GPIO_ConfigPtr[i].port_num, GPIO_ConfigPtr[i].pin_num, GPIO_ConfigPtr[i].direction);
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	c9 01       	movw	r24, r18
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	28 0f       	add	r18, r24
     f64:	39 1f       	adc	r19, r25
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	9b 81       	ldd	r25, Y+3	; 0x03
     f6a:	fc 01       	movw	r30, r24
     f6c:	e2 0f       	add	r30, r18
     f6e:	f3 1f       	adc	r31, r19
     f70:	50 81       	ld	r21, Z
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	c9 01       	movw	r24, r18
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	28 0f       	add	r18, r24
     f84:	39 1f       	adc	r19, r25
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	9b 81       	ldd	r25, Y+3	; 0x03
     f8a:	fc 01       	movw	r30, r24
     f8c:	e2 0f       	add	r30, r18
     f8e:	f3 1f       	adc	r31, r19
     f90:	41 81       	ldd	r20, Z+1	; 0x01
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	c9 01       	movw	r24, r18
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	28 0f       	add	r18, r24
     fa4:	39 1f       	adc	r19, r25
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	9b 81       	ldd	r25, Y+3	; 0x03
     faa:	fc 01       	movw	r30, r24
     fac:	e2 0f       	add	r30, r18
     fae:	f3 1f       	adc	r31, r19
     fb0:	92 81       	ldd	r25, Z+2	; 0x02
     fb2:	85 2f       	mov	r24, r21
     fb4:	64 2f       	mov	r22, r20
     fb6:	49 2f       	mov	r20, r25
     fb8:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>

		GPIO_writePin(GPIO_ConfigPtr[i].port_num, GPIO_ConfigPtr[i].pin_num, GPIO_ConfigPtr[i].initial_value);
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	c9 01       	movw	r24, r18
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	28 0f       	add	r18, r24
     fce:	39 1f       	adc	r19, r25
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	9b 81       	ldd	r25, Y+3	; 0x03
     fd4:	fc 01       	movw	r30, r24
     fd6:	e2 0f       	add	r30, r18
     fd8:	f3 1f       	adc	r31, r19
     fda:	50 81       	ld	r21, Z
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	c9 01       	movw	r24, r18
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	28 0f       	add	r18, r24
     fee:	39 1f       	adc	r19, r25
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	9b 81       	ldd	r25, Y+3	; 0x03
     ff4:	fc 01       	movw	r30, r24
     ff6:	e2 0f       	add	r30, r18
     ff8:	f3 1f       	adc	r31, r19
     ffa:	41 81       	ldd	r20, Z+1	; 0x01
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	c9 01       	movw	r24, r18
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	28 0f       	add	r18, r24
    100e:	39 1f       	adc	r19, r25
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	9b 81       	ldd	r25, Y+3	; 0x03
    1014:	fc 01       	movw	r30, r24
    1016:	e2 0f       	add	r30, r18
    1018:	f3 1f       	adc	r31, r19
    101a:	94 81       	ldd	r25, Z+4	; 0x04
    101c:	85 2f       	mov	r24, r21
    101e:	64 2f       	mov	r22, r20
    1020:	49 2f       	mov	r20, r25
    1022:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>


		if(GPIO_ConfigPtr[i].resistor == GPIO_PULL_UP)
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	c9 01       	movw	r24, r18
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	28 0f       	add	r18, r24
    1038:	39 1f       	adc	r19, r25
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	9b 81       	ldd	r25, Y+3	; 0x03
    103e:	fc 01       	movw	r30, r24
    1040:	e2 0f       	add	r30, r18
    1042:	f3 1f       	adc	r31, r19
    1044:	83 81       	ldd	r24, Z+3	; 0x03
    1046:	81 30       	cpi	r24, 0x01	; 1
    1048:	29 f5       	brne	.+74     	; 0x1094 <GPIO_Init+0x1a2>
		{
			GPIO_writePin(GPIO_ConfigPtr[i].port_num, GPIO_ConfigPtr[i].pin_num,LOGIC_HIGH);
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	c9 01       	movw	r24, r18
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	28 0f       	add	r18, r24
    105c:	39 1f       	adc	r19, r25
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	9b 81       	ldd	r25, Y+3	; 0x03
    1062:	fc 01       	movw	r30, r24
    1064:	e2 0f       	add	r30, r18
    1066:	f3 1f       	adc	r31, r19
    1068:	40 81       	ld	r20, Z
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	c9 01       	movw	r24, r18
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	28 0f       	add	r18, r24
    107c:	39 1f       	adc	r19, r25
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	9b 81       	ldd	r25, Y+3	; 0x03
    1082:	fc 01       	movw	r30, r24
    1084:	e2 0f       	add	r30, r18
    1086:	f3 1f       	adc	r31, r19
    1088:	91 81       	ldd	r25, Z+1	; 0x01
    108a:	84 2f       	mov	r24, r20
    108c:	69 2f       	mov	r22, r25
    108e:	41 e0       	ldi	r20, 0x01	; 1
    1090:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_Init(const GPIO_ConfigType GPIO_ConfigPtr[])
{
    uint8 i = 0;
    for (; i < TOTAL_PINS_NUM; ++i)
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	8f 5f       	subi	r24, 0xFF	; 255
    1098:	89 83       	std	Y+1, r24	; 0x01
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	80 32       	cpi	r24, 0x20	; 32
    109e:	08 f4       	brcc	.+2      	; 0x10a2 <GPIO_Init+0x1b0>
    10a0:	32 cf       	rjmp	.-412    	; 0xf06 <GPIO_Init+0x14>
		{

		}
	}
}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <GPIO_ChannelGroupWrite>:
/*
 *  Description :
 *  write in a group of of pin
 */
void GPIO_ChannelGroupWrite(ChannelGroupType* ChannelID ,uint8 dataPtr[]){
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	28 97       	sbiw	r28, 0x08	; 8
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	9e 83       	std	Y+6, r25	; 0x06
    10c4:	8d 83       	std	Y+5, r24	; 0x05
    10c6:	78 87       	std	Y+8, r23	; 0x08
    10c8:	6f 83       	std	Y+7, r22	; 0x07
    uint8 i = 0;
    10ca:	1c 82       	std	Y+4, r1	; 0x04
    uint8 id=0;
    10cc:	1b 82       	std	Y+3, r1	; 0x03
    uint8 port_num=0;
    10ce:	1a 82       	std	Y+2, r1	; 0x02
    uint8 pin_num=0;
    10d0:	19 82       	std	Y+1, r1	; 0x01
    10d2:	40 c0       	rjmp	.+128    	; 0x1154 <GPIO_ChannelGroupWrite+0xa6>
	for(; i < ChannelID->no_of_channels; ++i)
	{
	    id= ChannelID->group_ids[i];
    10d4:	8c 81       	ldd	r24, Y+4	; 0x04
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	8d 81       	ldd	r24, Y+5	; 0x05
    10dc:	9e 81       	ldd	r25, Y+6	; 0x06
    10de:	82 0f       	add	r24, r18
    10e0:	93 1f       	adc	r25, r19
    10e2:	fc 01       	movw	r30, r24
    10e4:	31 96       	adiw	r30, 0x01	; 1
    10e6:	80 81       	ld	r24, Z
    10e8:	8b 83       	std	Y+3, r24	; 0x03
	    port_num = GPIO_ConfigPin[id].port_num;
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	c9 01       	movw	r24, r18
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	82 0f       	add	r24, r18
    10fc:	93 1f       	adc	r25, r19
    10fe:	fc 01       	movw	r30, r24
    1100:	e8 59       	subi	r30, 0x98	; 152
    1102:	ff 4f       	sbci	r31, 0xFF	; 255
    1104:	80 81       	ld	r24, Z
    1106:	8a 83       	std	Y+2, r24	; 0x02
	    pin_num=GPIO_ConfigPin[id].pin_num;
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	c9 01       	movw	r24, r18
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	82 0f       	add	r24, r18
    111a:	93 1f       	adc	r25, r19
    111c:	fc 01       	movw	r30, r24
    111e:	e7 59       	subi	r30, 0x97	; 151
    1120:	ff 4f       	sbci	r31, 0xFF	; 255
    1122:	80 81       	ld	r24, Z
    1124:	89 83       	std	Y+1, r24	; 0x01

		if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS) )
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	88 30       	cpi	r24, 0x08	; 8
    112a:	88 f4       	brcc	.+34     	; 0x114e <GPIO_ChannelGroupWrite+0xa0>
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	84 30       	cpi	r24, 0x04	; 4
    1130:	70 f4       	brcc	.+28     	; 0x114e <GPIO_ChannelGroupWrite+0xa0>
		}
		else
		{


			GPIO_writePin(port_num, pin_num,dataPtr[i]);
    1132:	8c 81       	ldd	r24, Y+4	; 0x04
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	8f 81       	ldd	r24, Y+7	; 0x07
    113a:	98 85       	ldd	r25, Y+8	; 0x08
    113c:	fc 01       	movw	r30, r24
    113e:	e2 0f       	add	r30, r18
    1140:	f3 1f       	adc	r31, r19
    1142:	90 81       	ld	r25, Z
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	69 81       	ldd	r22, Y+1	; 0x01
    1148:	49 2f       	mov	r20, r25
    114a:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
void GPIO_ChannelGroupWrite(ChannelGroupType* ChannelID ,uint8 dataPtr[]){
    uint8 i = 0;
    uint8 id=0;
    uint8 port_num=0;
    uint8 pin_num=0;
	for(; i < ChannelID->no_of_channels; ++i)
    114e:	8c 81       	ldd	r24, Y+4	; 0x04
    1150:	8f 5f       	subi	r24, 0xFF	; 255
    1152:	8c 83       	std	Y+4, r24	; 0x04
    1154:	ed 81       	ldd	r30, Y+5	; 0x05
    1156:	fe 81       	ldd	r31, Y+6	; 0x06
    1158:	90 81       	ld	r25, Z
    115a:	8c 81       	ldd	r24, Y+4	; 0x04
    115c:	89 17       	cp	r24, r25
    115e:	08 f4       	brcc	.+2      	; 0x1162 <GPIO_ChannelGroupWrite+0xb4>
    1160:	b9 cf       	rjmp	.-142    	; 0x10d4 <GPIO_ChannelGroupWrite+0x26>

			GPIO_writePin(port_num, pin_num,dataPtr[i]);

		}
	}
}
    1162:	28 96       	adiw	r28, 0x08	; 8
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	f8 94       	cli
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	cd bf       	out	0x3d, r28	; 61
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <GPIO_ChannelGroupRead>:
/*
 *  Description :
 *  read in a group of of pin
 */
void GPIO_ChannelGroupRead(ChannelGroupType* ChannelID,uint8 dataPtr[]){
    1174:	0f 93       	push	r16
    1176:	1f 93       	push	r17
    1178:	df 93       	push	r29
    117a:	cf 93       	push	r28
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	a4 97       	sbiw	r28, 0x24	; 36
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	f8 94       	cli
    1186:	de bf       	out	0x3e, r29	; 62
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	cd bf       	out	0x3d, r28	; 61
    118c:	9a a3       	std	Y+34, r25	; 0x22
    118e:	89 a3       	std	Y+33, r24	; 0x21
    1190:	7c a3       	std	Y+36, r23	; 0x24
    1192:	6b a3       	std	Y+35, r22	; 0x23
    uint8 i = 0;
    1194:	18 a2       	std	Y+32, r1	; 0x20
    uint8 id=0;
    1196:	1f 8e       	std	Y+31, r1	; 0x1f
    uint8 port_num=0;
    1198:	1e 8e       	std	Y+30, r1	; 0x1e
    uint8 pin_num=0;
    119a:	1d 8e       	std	Y+29, r1	; 0x1d
    119c:	50 c1       	rjmp	.+672    	; 0x143e <GPIO_ChannelGroupRead+0x2ca>
	for(; i < ChannelID->no_of_channels; ++i)
	{
		id= ChannelID->group_ids[i];
    119e:	88 a1       	ldd	r24, Y+32	; 0x20
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	89 a1       	ldd	r24, Y+33	; 0x21
    11a6:	9a a1       	ldd	r25, Y+34	; 0x22
    11a8:	82 0f       	add	r24, r18
    11aa:	93 1f       	adc	r25, r19
    11ac:	fc 01       	movw	r30, r24
    11ae:	31 96       	adiw	r30, 0x01	; 1
    11b0:	80 81       	ld	r24, Z
    11b2:	8f 8f       	std	Y+31, r24	; 0x1f
		port_num = GPIO_ConfigPin[id].port_num;
    11b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	c9 01       	movw	r24, r18
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	82 0f       	add	r24, r18
    11c6:	93 1f       	adc	r25, r19
    11c8:	fc 01       	movw	r30, r24
    11ca:	e8 59       	subi	r30, 0x98	; 152
    11cc:	ff 4f       	sbci	r31, 0xFF	; 255
    11ce:	80 81       	ld	r24, Z
    11d0:	8e 8f       	std	Y+30, r24	; 0x1e
		pin_num=GPIO_ConfigPin[id].pin_num;
    11d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	c9 01       	movw	r24, r18
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	82 0f       	add	r24, r18
    11e4:	93 1f       	adc	r25, r19
    11e6:	fc 01       	movw	r30, r24
    11e8:	e7 59       	subi	r30, 0x97	; 151
    11ea:	ff 4f       	sbci	r31, 0xFF	; 255
    11ec:	80 81       	ld	r24, Z
    11ee:	8d 8f       	std	Y+29, r24	; 0x1d

		if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS) )
    11f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11f2:	88 30       	cpi	r24, 0x08	; 8
    11f4:	08 f0       	brcs	.+2      	; 0x11f8 <GPIO_ChannelGroupRead+0x84>
    11f6:	20 c1       	rjmp	.+576    	; 0x1438 <GPIO_ChannelGroupRead+0x2c4>
    11f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11fa:	84 30       	cpi	r24, 0x04	; 4
    11fc:	08 f0       	brcs	.+2      	; 0x1200 <GPIO_ChannelGroupRead+0x8c>
    11fe:	1c c1       	rjmp	.+568    	; 0x1438 <GPIO_ChannelGroupRead+0x2c4>
			/* Do Nothing */
		}
		else
		{

			if(GPIO_readPin(port_num, pin_num) == LOGIC_HIGH)
    1200:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1202:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1204:	0e 94 07 0c 	call	0x180e	; 0x180e <GPIO_readPin>
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	09 f0       	breq	.+2      	; 0x120e <GPIO_ChannelGroupRead+0x9a>
    120c:	88 c0       	rjmp	.+272    	; 0x131e <GPIO_ChannelGroupRead+0x1aa>
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	a0 ef       	ldi	r26, 0xF0	; 240
    1214:	b1 e4       	ldi	r27, 0x41	; 65
    1216:	89 8f       	std	Y+25, r24	; 0x19
    1218:	9a 8f       	std	Y+26, r25	; 0x1a
    121a:	ab 8f       	std	Y+27, r26	; 0x1b
    121c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    121e:	69 8d       	ldd	r22, Y+25	; 0x19
    1220:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1222:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1224:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	4a e7       	ldi	r20, 0x7A	; 122
    122c:	53 e4       	ldi	r21, 0x43	; 67
    122e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	8d 8b       	std	Y+21, r24	; 0x15
    1238:	9e 8b       	std	Y+22, r25	; 0x16
    123a:	af 8b       	std	Y+23, r26	; 0x17
    123c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    123e:	6d 89       	ldd	r22, Y+21	; 0x15
    1240:	7e 89       	ldd	r23, Y+22	; 0x16
    1242:	8f 89       	ldd	r24, Y+23	; 0x17
    1244:	98 8d       	ldd	r25, Y+24	; 0x18
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 e8       	ldi	r20, 0x80	; 128
    124c:	5f e3       	ldi	r21, 0x3F	; 63
    124e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1252:	88 23       	and	r24, r24
    1254:	2c f4       	brge	.+10     	; 0x1260 <GPIO_ChannelGroupRead+0xec>
		__ticks = 1;
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	9c 8b       	std	Y+20, r25	; 0x14
    125c:	8b 8b       	std	Y+19, r24	; 0x13
    125e:	3f c0       	rjmp	.+126    	; 0x12de <GPIO_ChannelGroupRead+0x16a>
	else if (__tmp > 65535)
    1260:	6d 89       	ldd	r22, Y+21	; 0x15
    1262:	7e 89       	ldd	r23, Y+22	; 0x16
    1264:	8f 89       	ldd	r24, Y+23	; 0x17
    1266:	98 8d       	ldd	r25, Y+24	; 0x18
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	3f ef       	ldi	r19, 0xFF	; 255
    126c:	4f e7       	ldi	r20, 0x7F	; 127
    126e:	57 e4       	ldi	r21, 0x47	; 71
    1270:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1274:	18 16       	cp	r1, r24
    1276:	4c f5       	brge	.+82     	; 0x12ca <GPIO_ChannelGroupRead+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1278:	69 8d       	ldd	r22, Y+25	; 0x19
    127a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    127c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    127e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 e2       	ldi	r20, 0x20	; 32
    1286:	51 e4       	ldi	r21, 0x41	; 65
    1288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	bc 01       	movw	r22, r24
    1292:	cd 01       	movw	r24, r26
    1294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	9c 8b       	std	Y+20, r25	; 0x14
    129e:	8b 8b       	std	Y+19, r24	; 0x13
    12a0:	0f c0       	rjmp	.+30     	; 0x12c0 <GPIO_ChannelGroupRead+0x14c>
    12a2:	89 e1       	ldi	r24, 0x19	; 25
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	9a 8b       	std	Y+18, r25	; 0x12
    12a8:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12aa:	89 89       	ldd	r24, Y+17	; 0x11
    12ac:	9a 89       	ldd	r25, Y+18	; 0x12
    12ae:	01 97       	sbiw	r24, 0x01	; 1
    12b0:	f1 f7       	brne	.-4      	; 0x12ae <GPIO_ChannelGroupRead+0x13a>
    12b2:	9a 8b       	std	Y+18, r25	; 0x12
    12b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b6:	8b 89       	ldd	r24, Y+19	; 0x13
    12b8:	9c 89       	ldd	r25, Y+20	; 0x14
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	9c 8b       	std	Y+20, r25	; 0x14
    12be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12c0:	8b 89       	ldd	r24, Y+19	; 0x13
    12c2:	9c 89       	ldd	r25, Y+20	; 0x14
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	69 f7       	brne	.-38     	; 0x12a2 <GPIO_ChannelGroupRead+0x12e>
    12c8:	14 c0       	rjmp	.+40     	; 0x12f2 <GPIO_ChannelGroupRead+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ca:	6d 89       	ldd	r22, Y+21	; 0x15
    12cc:	7e 89       	ldd	r23, Y+22	; 0x16
    12ce:	8f 89       	ldd	r24, Y+23	; 0x17
    12d0:	98 8d       	ldd	r25, Y+24	; 0x18
    12d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	9c 8b       	std	Y+20, r25	; 0x14
    12dc:	8b 8b       	std	Y+19, r24	; 0x13
    12de:	8b 89       	ldd	r24, Y+19	; 0x13
    12e0:	9c 89       	ldd	r25, Y+20	; 0x14
    12e2:	98 8b       	std	Y+16, r25	; 0x10
    12e4:	8f 87       	std	Y+15, r24	; 0x0f
    12e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    12e8:	98 89       	ldd	r25, Y+16	; 0x10
    12ea:	01 97       	sbiw	r24, 0x01	; 1
    12ec:	f1 f7       	brne	.-4      	; 0x12ea <GPIO_ChannelGroupRead+0x176>
    12ee:	98 8b       	std	Y+16, r25	; 0x10
    12f0:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms((double)30);
				if(GPIO_readPin(port_num, pin_num) == LOGIC_HIGH)
    12f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12f4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    12f6:	0e 94 07 0c 	call	0x180e	; 0x180e <GPIO_readPin>
    12fa:	81 30       	cpi	r24, 0x01	; 1
    12fc:	09 f0       	breq	.+2      	; 0x1300 <GPIO_ChannelGroupRead+0x18c>
    12fe:	9c c0       	rjmp	.+312    	; 0x1438 <GPIO_ChannelGroupRead+0x2c4>
				{
				dataPtr[i] = GPIO_readPin(port_num, pin_num);
    1300:	88 a1       	ldd	r24, Y+32	; 0x20
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	8b a1       	ldd	r24, Y+35	; 0x23
    1308:	9c a1       	ldd	r25, Y+36	; 0x24
    130a:	8c 01       	movw	r16, r24
    130c:	02 0f       	add	r16, r18
    130e:	13 1f       	adc	r17, r19
    1310:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1312:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1314:	0e 94 07 0c 	call	0x180e	; 0x180e <GPIO_readPin>
    1318:	f8 01       	movw	r30, r16
    131a:	80 83       	st	Z, r24
    131c:	8d c0       	rjmp	.+282    	; 0x1438 <GPIO_ChannelGroupRead+0x2c4>
				}
			}
			else if(GPIO_readPin(port_num, pin_num) == LOGIC_LOW)
    131e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1320:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1322:	0e 94 07 0c 	call	0x180e	; 0x180e <GPIO_readPin>
    1326:	88 23       	and	r24, r24
    1328:	09 f0       	breq	.+2      	; 0x132c <GPIO_ChannelGroupRead+0x1b8>
    132a:	86 c0       	rjmp	.+268    	; 0x1438 <GPIO_ChannelGroupRead+0x2c4>
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	a0 ef       	ldi	r26, 0xF0	; 240
    1332:	b1 e4       	ldi	r27, 0x41	; 65
    1334:	8b 87       	std	Y+11, r24	; 0x0b
    1336:	9c 87       	std	Y+12, r25	; 0x0c
    1338:	ad 87       	std	Y+13, r26	; 0x0d
    133a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    133c:	6b 85       	ldd	r22, Y+11	; 0x0b
    133e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1340:	8d 85       	ldd	r24, Y+13	; 0x0d
    1342:	9e 85       	ldd	r25, Y+14	; 0x0e
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	4a e7       	ldi	r20, 0x7A	; 122
    134a:	53 e4       	ldi	r21, 0x43	; 67
    134c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1350:	dc 01       	movw	r26, r24
    1352:	cb 01       	movw	r24, r22
    1354:	8f 83       	std	Y+7, r24	; 0x07
    1356:	98 87       	std	Y+8, r25	; 0x08
    1358:	a9 87       	std	Y+9, r26	; 0x09
    135a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    135c:	6f 81       	ldd	r22, Y+7	; 0x07
    135e:	78 85       	ldd	r23, Y+8	; 0x08
    1360:	89 85       	ldd	r24, Y+9	; 0x09
    1362:	9a 85       	ldd	r25, Y+10	; 0x0a
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	40 e8       	ldi	r20, 0x80	; 128
    136a:	5f e3       	ldi	r21, 0x3F	; 63
    136c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1370:	88 23       	and	r24, r24
    1372:	2c f4       	brge	.+10     	; 0x137e <GPIO_ChannelGroupRead+0x20a>
		__ticks = 1;
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	9e 83       	std	Y+6, r25	; 0x06
    137a:	8d 83       	std	Y+5, r24	; 0x05
    137c:	3f c0       	rjmp	.+126    	; 0x13fc <GPIO_ChannelGroupRead+0x288>
	else if (__tmp > 65535)
    137e:	6f 81       	ldd	r22, Y+7	; 0x07
    1380:	78 85       	ldd	r23, Y+8	; 0x08
    1382:	89 85       	ldd	r24, Y+9	; 0x09
    1384:	9a 85       	ldd	r25, Y+10	; 0x0a
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	3f ef       	ldi	r19, 0xFF	; 255
    138a:	4f e7       	ldi	r20, 0x7F	; 127
    138c:	57 e4       	ldi	r21, 0x47	; 71
    138e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1392:	18 16       	cp	r1, r24
    1394:	4c f5       	brge	.+82     	; 0x13e8 <GPIO_ChannelGroupRead+0x274>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1396:	6b 85       	ldd	r22, Y+11	; 0x0b
    1398:	7c 85       	ldd	r23, Y+12	; 0x0c
    139a:	8d 85       	ldd	r24, Y+13	; 0x0d
    139c:	9e 85       	ldd	r25, Y+14	; 0x0e
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	40 e2       	ldi	r20, 0x20	; 32
    13a4:	51 e4       	ldi	r21, 0x41	; 65
    13a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13aa:	dc 01       	movw	r26, r24
    13ac:	cb 01       	movw	r24, r22
    13ae:	bc 01       	movw	r22, r24
    13b0:	cd 01       	movw	r24, r26
    13b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b6:	dc 01       	movw	r26, r24
    13b8:	cb 01       	movw	r24, r22
    13ba:	9e 83       	std	Y+6, r25	; 0x06
    13bc:	8d 83       	std	Y+5, r24	; 0x05
    13be:	0f c0       	rjmp	.+30     	; 0x13de <GPIO_ChannelGroupRead+0x26a>
    13c0:	89 e1       	ldi	r24, 0x19	; 25
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	9c 83       	std	Y+4, r25	; 0x04
    13c6:	8b 83       	std	Y+3, r24	; 0x03
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	9c 81       	ldd	r25, Y+4	; 0x04
    13cc:	01 97       	sbiw	r24, 0x01	; 1
    13ce:	f1 f7       	brne	.-4      	; 0x13cc <GPIO_ChannelGroupRead+0x258>
    13d0:	9c 83       	std	Y+4, r25	; 0x04
    13d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d4:	8d 81       	ldd	r24, Y+5	; 0x05
    13d6:	9e 81       	ldd	r25, Y+6	; 0x06
    13d8:	01 97       	sbiw	r24, 0x01	; 1
    13da:	9e 83       	std	Y+6, r25	; 0x06
    13dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13de:	8d 81       	ldd	r24, Y+5	; 0x05
    13e0:	9e 81       	ldd	r25, Y+6	; 0x06
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	69 f7       	brne	.-38     	; 0x13c0 <GPIO_ChannelGroupRead+0x24c>
    13e6:	14 c0       	rjmp	.+40     	; 0x1410 <GPIO_ChannelGroupRead+0x29c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13e8:	6f 81       	ldd	r22, Y+7	; 0x07
    13ea:	78 85       	ldd	r23, Y+8	; 0x08
    13ec:	89 85       	ldd	r24, Y+9	; 0x09
    13ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f4:	dc 01       	movw	r26, r24
    13f6:	cb 01       	movw	r24, r22
    13f8:	9e 83       	std	Y+6, r25	; 0x06
    13fa:	8d 83       	std	Y+5, r24	; 0x05
    13fc:	8d 81       	ldd	r24, Y+5	; 0x05
    13fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1400:	9a 83       	std	Y+2, r25	; 0x02
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	9a 81       	ldd	r25, Y+2	; 0x02
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	f1 f7       	brne	.-4      	; 0x1408 <GPIO_ChannelGroupRead+0x294>
    140c:	9a 83       	std	Y+2, r25	; 0x02
    140e:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms((double)30);
				if(GPIO_readPin(port_num, pin_num) == LOGIC_LOW)
    1410:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1412:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1414:	0e 94 07 0c 	call	0x180e	; 0x180e <GPIO_readPin>
    1418:	88 23       	and	r24, r24
    141a:	71 f4       	brne	.+28     	; 0x1438 <GPIO_ChannelGroupRead+0x2c4>
				{
				dataPtr[i] = GPIO_readPin(port_num, pin_num);
    141c:	88 a1       	ldd	r24, Y+32	; 0x20
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	8b a1       	ldd	r24, Y+35	; 0x23
    1424:	9c a1       	ldd	r25, Y+36	; 0x24
    1426:	8c 01       	movw	r16, r24
    1428:	02 0f       	add	r16, r18
    142a:	13 1f       	adc	r17, r19
    142c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    142e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1430:	0e 94 07 0c 	call	0x180e	; 0x180e <GPIO_readPin>
    1434:	f8 01       	movw	r30, r16
    1436:	80 83       	st	Z, r24
void GPIO_ChannelGroupRead(ChannelGroupType* ChannelID,uint8 dataPtr[]){
    uint8 i = 0;
    uint8 id=0;
    uint8 port_num=0;
    uint8 pin_num=0;
	for(; i < ChannelID->no_of_channels; ++i)
    1438:	88 a1       	ldd	r24, Y+32	; 0x20
    143a:	8f 5f       	subi	r24, 0xFF	; 255
    143c:	88 a3       	std	Y+32, r24	; 0x20
    143e:	e9 a1       	ldd	r30, Y+33	; 0x21
    1440:	fa a1       	ldd	r31, Y+34	; 0x22
    1442:	90 81       	ld	r25, Z
    1444:	88 a1       	ldd	r24, Y+32	; 0x20
    1446:	89 17       	cp	r24, r25
    1448:	08 f4       	brcc	.+2      	; 0x144c <GPIO_ChannelGroupRead+0x2d8>
    144a:	a9 ce       	rjmp	.-686    	; 0x119e <GPIO_ChannelGroupRead+0x2a>

			}

		}
	}
}
    144c:	a4 96       	adiw	r28, 0x24	; 36
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	f8 94       	cli
    1452:	de bf       	out	0x3e, r29	; 62
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	cd bf       	out	0x3d, r28	; 61
    1458:	cf 91       	pop	r28
    145a:	df 91       	pop	r29
    145c:	1f 91       	pop	r17
    145e:	0f 91       	pop	r16
    1460:	08 95       	ret

00001462 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	00 d0       	rcall	.+0      	; 0x1468 <GPIO_setupPinDirection+0x6>
    1468:	00 d0       	rcall	.+0      	; 0x146a <GPIO_setupPinDirection+0x8>
    146a:	0f 92       	push	r0
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	6a 83       	std	Y+2, r22	; 0x02
    1474:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	88 30       	cpi	r24, 0x08	; 8
    147a:	08 f0       	brcs	.+2      	; 0x147e <GPIO_setupPinDirection+0x1c>
    147c:	d5 c0       	rjmp	.+426    	; 0x1628 <GPIO_setupPinDirection+0x1c6>
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	84 30       	cpi	r24, 0x04	; 4
    1482:	08 f0       	brcs	.+2      	; 0x1486 <GPIO_setupPinDirection+0x24>
    1484:	d1 c0       	rjmp	.+418    	; 0x1628 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1486:	89 81       	ldd	r24, Y+1	; 0x01
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	3d 83       	std	Y+5, r19	; 0x05
    148e:	2c 83       	std	Y+4, r18	; 0x04
    1490:	8c 81       	ldd	r24, Y+4	; 0x04
    1492:	9d 81       	ldd	r25, Y+5	; 0x05
    1494:	81 30       	cpi	r24, 0x01	; 1
    1496:	91 05       	cpc	r25, r1
    1498:	09 f4       	brne	.+2      	; 0x149c <GPIO_setupPinDirection+0x3a>
    149a:	43 c0       	rjmp	.+134    	; 0x1522 <GPIO_setupPinDirection+0xc0>
    149c:	2c 81       	ldd	r18, Y+4	; 0x04
    149e:	3d 81       	ldd	r19, Y+5	; 0x05
    14a0:	22 30       	cpi	r18, 0x02	; 2
    14a2:	31 05       	cpc	r19, r1
    14a4:	2c f4       	brge	.+10     	; 0x14b0 <GPIO_setupPinDirection+0x4e>
    14a6:	8c 81       	ldd	r24, Y+4	; 0x04
    14a8:	9d 81       	ldd	r25, Y+5	; 0x05
    14aa:	00 97       	sbiw	r24, 0x00	; 0
    14ac:	71 f0       	breq	.+28     	; 0x14ca <GPIO_setupPinDirection+0x68>
    14ae:	bc c0       	rjmp	.+376    	; 0x1628 <GPIO_setupPinDirection+0x1c6>
    14b0:	2c 81       	ldd	r18, Y+4	; 0x04
    14b2:	3d 81       	ldd	r19, Y+5	; 0x05
    14b4:	22 30       	cpi	r18, 0x02	; 2
    14b6:	31 05       	cpc	r19, r1
    14b8:	09 f4       	brne	.+2      	; 0x14bc <GPIO_setupPinDirection+0x5a>
    14ba:	5f c0       	rjmp	.+190    	; 0x157a <GPIO_setupPinDirection+0x118>
    14bc:	8c 81       	ldd	r24, Y+4	; 0x04
    14be:	9d 81       	ldd	r25, Y+5	; 0x05
    14c0:	83 30       	cpi	r24, 0x03	; 3
    14c2:	91 05       	cpc	r25, r1
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <GPIO_setupPinDirection+0x66>
    14c6:	85 c0       	rjmp	.+266    	; 0x15d2 <GPIO_setupPinDirection+0x170>
    14c8:	af c0       	rjmp	.+350    	; 0x1628 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	a1 f4       	brne	.+40     	; 0x14f8 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    14d0:	aa e3       	ldi	r26, 0x3A	; 58
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	ea e3       	ldi	r30, 0x3A	; 58
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	48 2f       	mov	r20, r24
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	02 2e       	mov	r0, r18
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <GPIO_setupPinDirection+0x8c>
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	0a 94       	dec	r0
    14f0:	e2 f7       	brpl	.-8      	; 0x14ea <GPIO_setupPinDirection+0x88>
    14f2:	84 2b       	or	r24, r20
    14f4:	8c 93       	st	X, r24
    14f6:	98 c0       	rjmp	.+304    	; 0x1628 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    14f8:	aa e3       	ldi	r26, 0x3A	; 58
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	ea e3       	ldi	r30, 0x3A	; 58
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	48 2f       	mov	r20, r24
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	02 2e       	mov	r0, r18
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <GPIO_setupPinDirection+0xb4>
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	0a 94       	dec	r0
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <GPIO_setupPinDirection+0xb0>
    151a:	80 95       	com	r24
    151c:	84 23       	and	r24, r20
    151e:	8c 93       	st	X, r24
    1520:	83 c0       	rjmp	.+262    	; 0x1628 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	81 30       	cpi	r24, 0x01	; 1
    1526:	a1 f4       	brne	.+40     	; 0x1550 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1528:	a7 e3       	ldi	r26, 0x37	; 55
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e7 e3       	ldi	r30, 0x37	; 55
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	48 2f       	mov	r20, r24
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	02 2e       	mov	r0, r18
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <GPIO_setupPinDirection+0xe4>
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	0a 94       	dec	r0
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <GPIO_setupPinDirection+0xe0>
    154a:	84 2b       	or	r24, r20
    154c:	8c 93       	st	X, r24
    154e:	6c c0       	rjmp	.+216    	; 0x1628 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1550:	a7 e3       	ldi	r26, 0x37	; 55
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e7 e3       	ldi	r30, 0x37	; 55
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	48 2f       	mov	r20, r24
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	02 2e       	mov	r0, r18
    1568:	02 c0       	rjmp	.+4      	; 0x156e <GPIO_setupPinDirection+0x10c>
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	0a 94       	dec	r0
    1570:	e2 f7       	brpl	.-8      	; 0x156a <GPIO_setupPinDirection+0x108>
    1572:	80 95       	com	r24
    1574:	84 23       	and	r24, r20
    1576:	8c 93       	st	X, r24
    1578:	57 c0       	rjmp	.+174    	; 0x1628 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	81 30       	cpi	r24, 0x01	; 1
    157e:	a1 f4       	brne	.+40     	; 0x15a8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1580:	a4 e3       	ldi	r26, 0x34	; 52
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	e4 e3       	ldi	r30, 0x34	; 52
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	48 2f       	mov	r20, r24
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	02 2e       	mov	r0, r18
    1598:	02 c0       	rjmp	.+4      	; 0x159e <GPIO_setupPinDirection+0x13c>
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	0a 94       	dec	r0
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <GPIO_setupPinDirection+0x138>
    15a2:	84 2b       	or	r24, r20
    15a4:	8c 93       	st	X, r24
    15a6:	40 c0       	rjmp	.+128    	; 0x1628 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    15a8:	a4 e3       	ldi	r26, 0x34	; 52
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e4 e3       	ldi	r30, 0x34	; 52
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	48 2f       	mov	r20, r24
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 2e       	mov	r0, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <GPIO_setupPinDirection+0x164>
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	0a 94       	dec	r0
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <GPIO_setupPinDirection+0x160>
    15ca:	80 95       	com	r24
    15cc:	84 23       	and	r24, r20
    15ce:	8c 93       	st	X, r24
    15d0:	2b c0       	rjmp	.+86     	; 0x1628 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	81 30       	cpi	r24, 0x01	; 1
    15d6:	a1 f4       	brne	.+40     	; 0x1600 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    15d8:	a1 e3       	ldi	r26, 0x31	; 49
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e1 e3       	ldi	r30, 0x31	; 49
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	48 2f       	mov	r20, r24
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	02 2e       	mov	r0, r18
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <GPIO_setupPinDirection+0x194>
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	0a 94       	dec	r0
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <GPIO_setupPinDirection+0x190>
    15fa:	84 2b       	or	r24, r20
    15fc:	8c 93       	st	X, r24
    15fe:	14 c0       	rjmp	.+40     	; 0x1628 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1600:	a1 e3       	ldi	r26, 0x31	; 49
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e1 e3       	ldi	r30, 0x31	; 49
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	48 2f       	mov	r20, r24
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	02 2e       	mov	r0, r18
    1618:	02 c0       	rjmp	.+4      	; 0x161e <GPIO_setupPinDirection+0x1bc>
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	0a 94       	dec	r0
    1620:	e2 f7       	brpl	.-8      	; 0x161a <GPIO_setupPinDirection+0x1b8>
    1622:	80 95       	com	r24
    1624:	84 23       	and	r24, r20
    1626:	8c 93       	st	X, r24
			break;
		default:
		    break;
		}
	}
}
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	08 95       	ret

00001638 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	00 d0       	rcall	.+0      	; 0x163e <GPIO_writePin+0x6>
    163e:	00 d0       	rcall	.+0      	; 0x1640 <GPIO_writePin+0x8>
    1640:	0f 92       	push	r0
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	89 83       	std	Y+1, r24	; 0x01
    1648:	6a 83       	std	Y+2, r22	; 0x02
    164a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	88 30       	cpi	r24, 0x08	; 8
    1650:	08 f0       	brcs	.+2      	; 0x1654 <GPIO_writePin+0x1c>
    1652:	d5 c0       	rjmp	.+426    	; 0x17fe <GPIO_writePin+0x1c6>
    1654:	89 81       	ldd	r24, Y+1	; 0x01
    1656:	84 30       	cpi	r24, 0x04	; 4
    1658:	08 f0       	brcs	.+2      	; 0x165c <GPIO_writePin+0x24>
    165a:	d1 c0       	rjmp	.+418    	; 0x17fe <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	3d 83       	std	Y+5, r19	; 0x05
    1664:	2c 83       	std	Y+4, r18	; 0x04
    1666:	8c 81       	ldd	r24, Y+4	; 0x04
    1668:	9d 81       	ldd	r25, Y+5	; 0x05
    166a:	81 30       	cpi	r24, 0x01	; 1
    166c:	91 05       	cpc	r25, r1
    166e:	09 f4       	brne	.+2      	; 0x1672 <GPIO_writePin+0x3a>
    1670:	43 c0       	rjmp	.+134    	; 0x16f8 <GPIO_writePin+0xc0>
    1672:	2c 81       	ldd	r18, Y+4	; 0x04
    1674:	3d 81       	ldd	r19, Y+5	; 0x05
    1676:	22 30       	cpi	r18, 0x02	; 2
    1678:	31 05       	cpc	r19, r1
    167a:	2c f4       	brge	.+10     	; 0x1686 <GPIO_writePin+0x4e>
    167c:	8c 81       	ldd	r24, Y+4	; 0x04
    167e:	9d 81       	ldd	r25, Y+5	; 0x05
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	71 f0       	breq	.+28     	; 0x16a0 <GPIO_writePin+0x68>
    1684:	bc c0       	rjmp	.+376    	; 0x17fe <GPIO_writePin+0x1c6>
    1686:	2c 81       	ldd	r18, Y+4	; 0x04
    1688:	3d 81       	ldd	r19, Y+5	; 0x05
    168a:	22 30       	cpi	r18, 0x02	; 2
    168c:	31 05       	cpc	r19, r1
    168e:	09 f4       	brne	.+2      	; 0x1692 <GPIO_writePin+0x5a>
    1690:	5f c0       	rjmp	.+190    	; 0x1750 <GPIO_writePin+0x118>
    1692:	8c 81       	ldd	r24, Y+4	; 0x04
    1694:	9d 81       	ldd	r25, Y+5	; 0x05
    1696:	83 30       	cpi	r24, 0x03	; 3
    1698:	91 05       	cpc	r25, r1
    169a:	09 f4       	brne	.+2      	; 0x169e <GPIO_writePin+0x66>
    169c:	85 c0       	rjmp	.+266    	; 0x17a8 <GPIO_writePin+0x170>
    169e:	af c0       	rjmp	.+350    	; 0x17fe <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	81 30       	cpi	r24, 0x01	; 1
    16a4:	a1 f4       	brne	.+40     	; 0x16ce <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    16a6:	ab e3       	ldi	r26, 0x3B	; 59
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	eb e3       	ldi	r30, 0x3B	; 59
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	48 2f       	mov	r20, r24
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	02 2e       	mov	r0, r18
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <GPIO_writePin+0x8c>
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	0a 94       	dec	r0
    16c6:	e2 f7       	brpl	.-8      	; 0x16c0 <GPIO_writePin+0x88>
    16c8:	84 2b       	or	r24, r20
    16ca:	8c 93       	st	X, r24
    16cc:	98 c0       	rjmp	.+304    	; 0x17fe <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    16ce:	ab e3       	ldi	r26, 0x3B	; 59
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	eb e3       	ldi	r30, 0x3B	; 59
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	48 2f       	mov	r20, r24
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	02 2e       	mov	r0, r18
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <GPIO_writePin+0xb4>
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	0a 94       	dec	r0
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <GPIO_writePin+0xb0>
    16f0:	80 95       	com	r24
    16f2:	84 23       	and	r24, r20
    16f4:	8c 93       	st	X, r24
    16f6:	83 c0       	rjmp	.+262    	; 0x17fe <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	a1 f4       	brne	.+40     	; 0x1726 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    16fe:	a8 e3       	ldi	r26, 0x38	; 56
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e8 e3       	ldi	r30, 0x38	; 56
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	48 2f       	mov	r20, r24
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	02 2e       	mov	r0, r18
    1716:	02 c0       	rjmp	.+4      	; 0x171c <GPIO_writePin+0xe4>
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	0a 94       	dec	r0
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <GPIO_writePin+0xe0>
    1720:	84 2b       	or	r24, r20
    1722:	8c 93       	st	X, r24
    1724:	6c c0       	rjmp	.+216    	; 0x17fe <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1726:	a8 e3       	ldi	r26, 0x38	; 56
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e8 e3       	ldi	r30, 0x38	; 56
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	48 2f       	mov	r20, r24
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	02 2e       	mov	r0, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <GPIO_writePin+0x10c>
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	0a 94       	dec	r0
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <GPIO_writePin+0x108>
    1748:	80 95       	com	r24
    174a:	84 23       	and	r24, r20
    174c:	8c 93       	st	X, r24
    174e:	57 c0       	rjmp	.+174    	; 0x17fe <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	81 30       	cpi	r24, 0x01	; 1
    1754:	a1 f4       	brne	.+40     	; 0x177e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1756:	a5 e3       	ldi	r26, 0x35	; 53
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e5 e3       	ldi	r30, 0x35	; 53
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	48 2f       	mov	r20, r24
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	02 2e       	mov	r0, r18
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <GPIO_writePin+0x13c>
    1770:	88 0f       	add	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	0a 94       	dec	r0
    1776:	e2 f7       	brpl	.-8      	; 0x1770 <GPIO_writePin+0x138>
    1778:	84 2b       	or	r24, r20
    177a:	8c 93       	st	X, r24
    177c:	40 c0       	rjmp	.+128    	; 0x17fe <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    177e:	a5 e3       	ldi	r26, 0x35	; 53
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e5 e3       	ldi	r30, 0x35	; 53
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	48 2f       	mov	r20, r24
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	02 2e       	mov	r0, r18
    1796:	02 c0       	rjmp	.+4      	; 0x179c <GPIO_writePin+0x164>
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	0a 94       	dec	r0
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <GPIO_writePin+0x160>
    17a0:	80 95       	com	r24
    17a2:	84 23       	and	r24, r20
    17a4:	8c 93       	st	X, r24
    17a6:	2b c0       	rjmp	.+86     	; 0x17fe <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	81 30       	cpi	r24, 0x01	; 1
    17ac:	a1 f4       	brne	.+40     	; 0x17d6 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    17ae:	a2 e3       	ldi	r26, 0x32	; 50
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e2 e3       	ldi	r30, 0x32	; 50
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	48 2f       	mov	r20, r24
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	02 2e       	mov	r0, r18
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <GPIO_writePin+0x194>
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	0a 94       	dec	r0
    17ce:	e2 f7       	brpl	.-8      	; 0x17c8 <GPIO_writePin+0x190>
    17d0:	84 2b       	or	r24, r20
    17d2:	8c 93       	st	X, r24
    17d4:	14 c0       	rjmp	.+40     	; 0x17fe <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    17d6:	a2 e3       	ldi	r26, 0x32	; 50
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e2 e3       	ldi	r30, 0x32	; 50
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	48 2f       	mov	r20, r24
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	02 2e       	mov	r0, r18
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <GPIO_writePin+0x1bc>
    17f0:	88 0f       	add	r24, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	0a 94       	dec	r0
    17f6:	e2 f7       	brpl	.-8      	; 0x17f0 <GPIO_writePin+0x1b8>
    17f8:	80 95       	com	r24
    17fa:	84 23       	and	r24, r20
    17fc:	8c 93       	st	X, r24
			break;
		default:
		            break;
		}
	}
}
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	08 95       	ret

0000180e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	00 d0       	rcall	.+0      	; 0x1814 <GPIO_readPin+0x6>
    1814:	00 d0       	rcall	.+0      	; 0x1816 <GPIO_readPin+0x8>
    1816:	0f 92       	push	r0
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	8a 83       	std	Y+2, r24	; 0x02
    181e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1820:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	88 30       	cpi	r24, 0x08	; 8
    1826:	08 f0       	brcs	.+2      	; 0x182a <GPIO_readPin+0x1c>
    1828:	84 c0       	rjmp	.+264    	; 0x1932 <GPIO_readPin+0x124>
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	84 30       	cpi	r24, 0x04	; 4
    182e:	08 f0       	brcs	.+2      	; 0x1832 <GPIO_readPin+0x24>
    1830:	80 c0       	rjmp	.+256    	; 0x1932 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	3d 83       	std	Y+5, r19	; 0x05
    183a:	2c 83       	std	Y+4, r18	; 0x04
    183c:	4c 81       	ldd	r20, Y+4	; 0x04
    183e:	5d 81       	ldd	r21, Y+5	; 0x05
    1840:	41 30       	cpi	r20, 0x01	; 1
    1842:	51 05       	cpc	r21, r1
    1844:	79 f1       	breq	.+94     	; 0x18a4 <GPIO_readPin+0x96>
    1846:	8c 81       	ldd	r24, Y+4	; 0x04
    1848:	9d 81       	ldd	r25, Y+5	; 0x05
    184a:	82 30       	cpi	r24, 0x02	; 2
    184c:	91 05       	cpc	r25, r1
    184e:	34 f4       	brge	.+12     	; 0x185c <GPIO_readPin+0x4e>
    1850:	2c 81       	ldd	r18, Y+4	; 0x04
    1852:	3d 81       	ldd	r19, Y+5	; 0x05
    1854:	21 15       	cp	r18, r1
    1856:	31 05       	cpc	r19, r1
    1858:	69 f0       	breq	.+26     	; 0x1874 <GPIO_readPin+0x66>
    185a:	6b c0       	rjmp	.+214    	; 0x1932 <GPIO_readPin+0x124>
    185c:	4c 81       	ldd	r20, Y+4	; 0x04
    185e:	5d 81       	ldd	r21, Y+5	; 0x05
    1860:	42 30       	cpi	r20, 0x02	; 2
    1862:	51 05       	cpc	r21, r1
    1864:	b9 f1       	breq	.+110    	; 0x18d4 <GPIO_readPin+0xc6>
    1866:	8c 81       	ldd	r24, Y+4	; 0x04
    1868:	9d 81       	ldd	r25, Y+5	; 0x05
    186a:	83 30       	cpi	r24, 0x03	; 3
    186c:	91 05       	cpc	r25, r1
    186e:	09 f4       	brne	.+2      	; 0x1872 <GPIO_readPin+0x64>
    1870:	49 c0       	rjmp	.+146    	; 0x1904 <GPIO_readPin+0xf6>
    1872:	5f c0       	rjmp	.+190    	; 0x1932 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1874:	e9 e3       	ldi	r30, 0x39	; 57
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	88 2f       	mov	r24, r24
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	a9 01       	movw	r20, r18
    1886:	02 c0       	rjmp	.+4      	; 0x188c <GPIO_readPin+0x7e>
    1888:	55 95       	asr	r21
    188a:	47 95       	ror	r20
    188c:	8a 95       	dec	r24
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <GPIO_readPin+0x7a>
    1890:	ca 01       	movw	r24, r20
    1892:	81 70       	andi	r24, 0x01	; 1
    1894:	90 70       	andi	r25, 0x00	; 0
    1896:	88 23       	and	r24, r24
    1898:	19 f0       	breq	.+6      	; 0x18a0 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	89 83       	std	Y+1, r24	; 0x01
    189e:	49 c0       	rjmp	.+146    	; 0x1932 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18a0:	19 82       	std	Y+1, r1	; 0x01
    18a2:	47 c0       	rjmp	.+142    	; 0x1932 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    18a4:	e6 e3       	ldi	r30, 0x36	; 54
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	88 2f       	mov	r24, r24
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	a9 01       	movw	r20, r18
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <GPIO_readPin+0xae>
    18b8:	55 95       	asr	r21
    18ba:	47 95       	ror	r20
    18bc:	8a 95       	dec	r24
    18be:	e2 f7       	brpl	.-8      	; 0x18b8 <GPIO_readPin+0xaa>
    18c0:	ca 01       	movw	r24, r20
    18c2:	81 70       	andi	r24, 0x01	; 1
    18c4:	90 70       	andi	r25, 0x00	; 0
    18c6:	88 23       	and	r24, r24
    18c8:	19 f0       	breq	.+6      	; 0x18d0 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	31 c0       	rjmp	.+98     	; 0x1932 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18d0:	19 82       	std	Y+1, r1	; 0x01
    18d2:	2f c0       	rjmp	.+94     	; 0x1932 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    18d4:	e3 e3       	ldi	r30, 0x33	; 51
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	88 2f       	mov	r24, r24
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	a9 01       	movw	r20, r18
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <GPIO_readPin+0xde>
    18e8:	55 95       	asr	r21
    18ea:	47 95       	ror	r20
    18ec:	8a 95       	dec	r24
    18ee:	e2 f7       	brpl	.-8      	; 0x18e8 <GPIO_readPin+0xda>
    18f0:	ca 01       	movw	r24, r20
    18f2:	81 70       	andi	r24, 0x01	; 1
    18f4:	90 70       	andi	r25, 0x00	; 0
    18f6:	88 23       	and	r24, r24
    18f8:	19 f0       	breq	.+6      	; 0x1900 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	89 83       	std	Y+1, r24	; 0x01
    18fe:	19 c0       	rjmp	.+50     	; 0x1932 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1900:	19 82       	std	Y+1, r1	; 0x01
    1902:	17 c0       	rjmp	.+46     	; 0x1932 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1904:	e0 e3       	ldi	r30, 0x30	; 48
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	28 2f       	mov	r18, r24
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	8b 81       	ldd	r24, Y+3	; 0x03
    1910:	88 2f       	mov	r24, r24
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	a9 01       	movw	r20, r18
    1916:	02 c0       	rjmp	.+4      	; 0x191c <GPIO_readPin+0x10e>
    1918:	55 95       	asr	r21
    191a:	47 95       	ror	r20
    191c:	8a 95       	dec	r24
    191e:	e2 f7       	brpl	.-8      	; 0x1918 <GPIO_readPin+0x10a>
    1920:	ca 01       	movw	r24, r20
    1922:	81 70       	andi	r24, 0x01	; 1
    1924:	90 70       	andi	r25, 0x00	; 0
    1926:	88 23       	and	r24, r24
    1928:	19 f0       	breq	.+6      	; 0x1930 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	89 83       	std	Y+1, r24	; 0x01
    192e:	01 c0       	rjmp	.+2      	; 0x1932 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1930:	19 82       	std	Y+1, r1	; 0x01
		default:
		            break;
		}
	}

	return pin_value;
    1932:	89 81       	ldd	r24, Y+1	; 0x01
}
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	08 95       	ret

00001944 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	00 d0       	rcall	.+0      	; 0x194a <GPIO_setupPortDirection+0x6>
    194a:	00 d0       	rcall	.+0      	; 0x194c <GPIO_setupPortDirection+0x8>
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	89 83       	std	Y+1, r24	; 0x01
    1952:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	84 30       	cpi	r24, 0x04	; 4
    1958:	90 f5       	brcc	.+100    	; 0x19be <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	3c 83       	std	Y+4, r19	; 0x04
    1962:	2b 83       	std	Y+3, r18	; 0x03
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	9c 81       	ldd	r25, Y+4	; 0x04
    1968:	81 30       	cpi	r24, 0x01	; 1
    196a:	91 05       	cpc	r25, r1
    196c:	d1 f0       	breq	.+52     	; 0x19a2 <GPIO_setupPortDirection+0x5e>
    196e:	2b 81       	ldd	r18, Y+3	; 0x03
    1970:	3c 81       	ldd	r19, Y+4	; 0x04
    1972:	22 30       	cpi	r18, 0x02	; 2
    1974:	31 05       	cpc	r19, r1
    1976:	2c f4       	brge	.+10     	; 0x1982 <GPIO_setupPortDirection+0x3e>
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	9c 81       	ldd	r25, Y+4	; 0x04
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	61 f0       	breq	.+24     	; 0x1998 <GPIO_setupPortDirection+0x54>
    1980:	1e c0       	rjmp	.+60     	; 0x19be <GPIO_setupPortDirection+0x7a>
    1982:	2b 81       	ldd	r18, Y+3	; 0x03
    1984:	3c 81       	ldd	r19, Y+4	; 0x04
    1986:	22 30       	cpi	r18, 0x02	; 2
    1988:	31 05       	cpc	r19, r1
    198a:	81 f0       	breq	.+32     	; 0x19ac <GPIO_setupPortDirection+0x68>
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	9c 81       	ldd	r25, Y+4	; 0x04
    1990:	83 30       	cpi	r24, 0x03	; 3
    1992:	91 05       	cpc	r25, r1
    1994:	81 f0       	breq	.+32     	; 0x19b6 <GPIO_setupPortDirection+0x72>
    1996:	13 c0       	rjmp	.+38     	; 0x19be <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1998:	ea e3       	ldi	r30, 0x3A	; 58
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	80 83       	st	Z, r24
    19a0:	0e c0       	rjmp	.+28     	; 0x19be <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    19a2:	e7 e3       	ldi	r30, 0x37	; 55
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	80 83       	st	Z, r24
    19aa:	09 c0       	rjmp	.+18     	; 0x19be <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    19ac:	e4 e3       	ldi	r30, 0x34	; 52
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	80 83       	st	Z, r24
    19b4:	04 c0       	rjmp	.+8      	; 0x19be <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    19b6:	e1 e3       	ldi	r30, 0x31	; 49
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	80 83       	st	Z, r24
			break;
		default:
		            break;
		}
	}
}
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	08 95       	ret

000019cc <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	00 d0       	rcall	.+0      	; 0x19d2 <GPIO_writePort+0x6>
    19d2:	00 d0       	rcall	.+0      	; 0x19d4 <GPIO_writePort+0x8>
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	89 83       	std	Y+1, r24	; 0x01
    19da:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
    19de:	84 30       	cpi	r24, 0x04	; 4
    19e0:	90 f5       	brcc	.+100    	; 0x1a46 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	3c 83       	std	Y+4, r19	; 0x04
    19ea:	2b 83       	std	Y+3, r18	; 0x03
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	81 30       	cpi	r24, 0x01	; 1
    19f2:	91 05       	cpc	r25, r1
    19f4:	d1 f0       	breq	.+52     	; 0x1a2a <GPIO_writePort+0x5e>
    19f6:	2b 81       	ldd	r18, Y+3	; 0x03
    19f8:	3c 81       	ldd	r19, Y+4	; 0x04
    19fa:	22 30       	cpi	r18, 0x02	; 2
    19fc:	31 05       	cpc	r19, r1
    19fe:	2c f4       	brge	.+10     	; 0x1a0a <GPIO_writePort+0x3e>
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	9c 81       	ldd	r25, Y+4	; 0x04
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	61 f0       	breq	.+24     	; 0x1a20 <GPIO_writePort+0x54>
    1a08:	1e c0       	rjmp	.+60     	; 0x1a46 <GPIO_writePort+0x7a>
    1a0a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a0c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a0e:	22 30       	cpi	r18, 0x02	; 2
    1a10:	31 05       	cpc	r19, r1
    1a12:	81 f0       	breq	.+32     	; 0x1a34 <GPIO_writePort+0x68>
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	9c 81       	ldd	r25, Y+4	; 0x04
    1a18:	83 30       	cpi	r24, 0x03	; 3
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	81 f0       	breq	.+32     	; 0x1a3e <GPIO_writePort+0x72>
    1a1e:	13 c0       	rjmp	.+38     	; 0x1a46 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a20:	eb e3       	ldi	r30, 0x3B	; 59
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	80 83       	st	Z, r24
    1a28:	0e c0       	rjmp	.+28     	; 0x1a46 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a2a:	e8 e3       	ldi	r30, 0x38	; 56
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	80 83       	st	Z, r24
    1a32:	09 c0       	rjmp	.+18     	; 0x1a46 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1a34:	e5 e3       	ldi	r30, 0x35	; 53
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	80 83       	st	Z, r24
    1a3c:	04 c0       	rjmp	.+8      	; 0x1a46 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1a3e:	e2 e3       	ldi	r30, 0x32	; 50
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	80 83       	st	Z, r24
			break;
		default:
		            break;
		}
	}
}
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	08 95       	ret

00001a54 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1a54:	df 93       	push	r29
    1a56:	cf 93       	push	r28
    1a58:	00 d0       	rcall	.+0      	; 0x1a5a <GPIO_readPort+0x6>
    1a5a:	00 d0       	rcall	.+0      	; 0x1a5c <GPIO_readPort+0x8>
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
    1a60:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1a62:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	84 30       	cpi	r24, 0x04	; 4
    1a68:	90 f5       	brcc	.+100    	; 0x1ace <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6c:	28 2f       	mov	r18, r24
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	3c 83       	std	Y+4, r19	; 0x04
    1a72:	2b 83       	std	Y+3, r18	; 0x03
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	9c 81       	ldd	r25, Y+4	; 0x04
    1a78:	81 30       	cpi	r24, 0x01	; 1
    1a7a:	91 05       	cpc	r25, r1
    1a7c:	d1 f0       	breq	.+52     	; 0x1ab2 <GPIO_readPort+0x5e>
    1a7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a80:	3c 81       	ldd	r19, Y+4	; 0x04
    1a82:	22 30       	cpi	r18, 0x02	; 2
    1a84:	31 05       	cpc	r19, r1
    1a86:	2c f4       	brge	.+10     	; 0x1a92 <GPIO_readPort+0x3e>
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8c:	00 97       	sbiw	r24, 0x00	; 0
    1a8e:	61 f0       	breq	.+24     	; 0x1aa8 <GPIO_readPort+0x54>
    1a90:	1e c0       	rjmp	.+60     	; 0x1ace <GPIO_readPort+0x7a>
    1a92:	2b 81       	ldd	r18, Y+3	; 0x03
    1a94:	3c 81       	ldd	r19, Y+4	; 0x04
    1a96:	22 30       	cpi	r18, 0x02	; 2
    1a98:	31 05       	cpc	r19, r1
    1a9a:	81 f0       	breq	.+32     	; 0x1abc <GPIO_readPort+0x68>
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa0:	83 30       	cpi	r24, 0x03	; 3
    1aa2:	91 05       	cpc	r25, r1
    1aa4:	81 f0       	breq	.+32     	; 0x1ac6 <GPIO_readPort+0x72>
    1aa6:	13 c0       	rjmp	.+38     	; 0x1ace <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1aa8:	e9 e3       	ldi	r30, 0x39	; 57
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	89 83       	std	Y+1, r24	; 0x01
    1ab0:	0e c0       	rjmp	.+28     	; 0x1ace <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1ab2:	e6 e3       	ldi	r30, 0x36	; 54
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	89 83       	std	Y+1, r24	; 0x01
    1aba:	09 c0       	rjmp	.+18     	; 0x1ace <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1abc:	e3 e3       	ldi	r30, 0x33	; 51
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	89 83       	std	Y+1, r24	; 0x01
    1ac4:	04 c0       	rjmp	.+8      	; 0x1ace <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1ac6:	e0 e3       	ldi	r30, 0x30	; 48
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	89 83       	std	Y+1, r24	; 0x01
		default:
		            break;
		}
	}

	return value;
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <GLOBAL_INTERRUPT_ENABLE>:
#include "EXT_INTTERUPT.h"



void GLOBAL_INTERRUPT_ENABLE(void)
{
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
	sei();
    1ae6:	78 94       	sei
}
    1ae8:	cf 91       	pop	r28
    1aea:	df 91       	pop	r29
    1aec:	08 95       	ret

00001aee <GLOBAL_INTERRUPT_DISABLE>:

void GLOBAL_INTERRUPT_DISABLE(void)
{
    1aee:	df 93       	push	r29
    1af0:	cf 93       	push	r28
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
	cli();
    1af6:	f8 94       	cli
}
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	08 95       	ret

00001afe <INT0_init>:

void INT0_init( EXT_triggerType triggerType,GPIO_PinDirectionType direction)
{
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	00 d0       	rcall	.+0      	; 0x1b04 <INT0_init+0x6>
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
    1b08:	89 83       	std	Y+1, r24	; 0x01
    1b0a:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_setupPinDirection(PORTD_ID,PIN2_ID,direction);/*set pin as input pin  or input pulled up*/
    1b0c:	83 e0       	ldi	r24, 0x03	; 3
    1b0e:	62 e0       	ldi	r22, 0x02	; 2
    1b10:	4a 81       	ldd	r20, Y+2	; 0x02
    1b12:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>
	MCUCR = (MCUCR & 0xFC) | triggerType;/*set type of trigger*/
    1b16:	a5 e5       	ldi	r26, 0x55	; 85
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e5 e5       	ldi	r30, 0x55	; 85
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	98 2f       	mov	r25, r24
    1b22:	9c 7f       	andi	r25, 0xFC	; 252
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	89 2b       	or	r24, r25
    1b28:	8c 93       	st	X, r24
	SET_BIT(GICR ,6); /*enable INT0*/
    1b2a:	ab e5       	ldi	r26, 0x5B	; 91
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	eb e5       	ldi	r30, 0x5B	; 91
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	80 64       	ori	r24, 0x40	; 64
    1b36:	8c 93       	st	X, r24
}
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	08 95       	ret

00001b42 <INT0_deInit>:



void INT0_deInit(void)
{
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GICR ,6);
    1b4a:	ab e5       	ldi	r26, 0x5B	; 91
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	eb e5       	ldi	r30, 0x5B	; 91
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	8f 7b       	andi	r24, 0xBF	; 191
    1b56:	8c 93       	st	X, r24
}
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1b66:	83 e0       	ldi	r24, 0x03	; 3
    1b68:	60 e0       	ldi	r22, 0x00	; 0
    1b6a:	41 e0       	ldi	r20, 0x01	; 1
    1b6c:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1b70:	83 e0       	ldi	r24, 0x03	; 3
    1b72:	61 e0       	ldi	r22, 0x01	; 1
    1b74:	41 e0       	ldi	r20, 0x01	; 1
    1b76:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1b7a:	83 e0       	ldi	r24, 0x03	; 3
    1b7c:	62 e0       	ldi	r22, 0x02	; 2
    1b7e:	41 e0       	ldi	r20, 0x01	; 1
    1b80:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1b84:	82 e0       	ldi	r24, 0x02	; 2
    1b86:	6f ef       	ldi	r22, 0xFF	; 255
    1b88:	0e 94 a2 0c 	call	0x1944	; 0x1944 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1b8c:	88 e3       	ldi	r24, 0x38	; 56
    1b8e:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1b92:	8c e0       	ldi	r24, 0x0C	; 12
    1b94:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <LCD_sendCommand>
}
    1b9e:	cf 91       	pop	r28
    1ba0:	df 91       	pop	r29
    1ba2:	08 95       	ret

00001ba4 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	cd b7       	in	r28, 0x3d	; 61
    1baa:	de b7       	in	r29, 0x3e	; 62
    1bac:	e9 97       	sbiw	r28, 0x39	; 57
    1bae:	0f b6       	in	r0, 0x3f	; 63
    1bb0:	f8 94       	cli
    1bb2:	de bf       	out	0x3e, r29	; 62
    1bb4:	0f be       	out	0x3f, r0	; 63
    1bb6:	cd bf       	out	0x3d, r28	; 61
    1bb8:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1bba:	83 e0       	ldi	r24, 0x03	; 3
    1bbc:	60 e0       	ldi	r22, 0x00	; 0
    1bbe:	40 e0       	ldi	r20, 0x00	; 0
    1bc0:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1bc4:	83 e0       	ldi	r24, 0x03	; 3
    1bc6:	61 e0       	ldi	r22, 0x01	; 1
    1bc8:	40 e0       	ldi	r20, 0x00	; 0
    1bca:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	a0 e8       	ldi	r26, 0x80	; 128
    1bd4:	bf e3       	ldi	r27, 0x3F	; 63
    1bd6:	8d ab       	std	Y+53, r24	; 0x35
    1bd8:	9e ab       	std	Y+54, r25	; 0x36
    1bda:	af ab       	std	Y+55, r26	; 0x37
    1bdc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bde:	6d a9       	ldd	r22, Y+53	; 0x35
    1be0:	7e a9       	ldd	r23, Y+54	; 0x36
    1be2:	8f a9       	ldd	r24, Y+55	; 0x37
    1be4:	98 ad       	ldd	r25, Y+56	; 0x38
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	4a e7       	ldi	r20, 0x7A	; 122
    1bec:	53 e4       	ldi	r21, 0x43	; 67
    1bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	89 ab       	std	Y+49, r24	; 0x31
    1bf8:	9a ab       	std	Y+50, r25	; 0x32
    1bfa:	ab ab       	std	Y+51, r26	; 0x33
    1bfc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bfe:	69 a9       	ldd	r22, Y+49	; 0x31
    1c00:	7a a9       	ldd	r23, Y+50	; 0x32
    1c02:	8b a9       	ldd	r24, Y+51	; 0x33
    1c04:	9c a9       	ldd	r25, Y+52	; 0x34
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	40 e8       	ldi	r20, 0x80	; 128
    1c0c:	5f e3       	ldi	r21, 0x3F	; 63
    1c0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c12:	88 23       	and	r24, r24
    1c14:	2c f4       	brge	.+10     	; 0x1c20 <LCD_sendCommand+0x7c>
		__ticks = 1;
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	98 ab       	std	Y+48, r25	; 0x30
    1c1c:	8f a7       	std	Y+47, r24	; 0x2f
    1c1e:	3f c0       	rjmp	.+126    	; 0x1c9e <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1c20:	69 a9       	ldd	r22, Y+49	; 0x31
    1c22:	7a a9       	ldd	r23, Y+50	; 0x32
    1c24:	8b a9       	ldd	r24, Y+51	; 0x33
    1c26:	9c a9       	ldd	r25, Y+52	; 0x34
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	3f ef       	ldi	r19, 0xFF	; 255
    1c2c:	4f e7       	ldi	r20, 0x7F	; 127
    1c2e:	57 e4       	ldi	r21, 0x47	; 71
    1c30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c34:	18 16       	cp	r1, r24
    1c36:	4c f5       	brge	.+82     	; 0x1c8a <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c38:	6d a9       	ldd	r22, Y+53	; 0x35
    1c3a:	7e a9       	ldd	r23, Y+54	; 0x36
    1c3c:	8f a9       	ldd	r24, Y+55	; 0x37
    1c3e:	98 ad       	ldd	r25, Y+56	; 0x38
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	40 e2       	ldi	r20, 0x20	; 32
    1c46:	51 e4       	ldi	r21, 0x41	; 65
    1c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	bc 01       	movw	r22, r24
    1c52:	cd 01       	movw	r24, r26
    1c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	98 ab       	std	Y+48, r25	; 0x30
    1c5e:	8f a7       	std	Y+47, r24	; 0x2f
    1c60:	0f c0       	rjmp	.+30     	; 0x1c80 <LCD_sendCommand+0xdc>
    1c62:	89 e1       	ldi	r24, 0x19	; 25
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	9e a7       	std	Y+46, r25	; 0x2e
    1c68:	8d a7       	std	Y+45, r24	; 0x2d
    1c6a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c6c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c6e:	01 97       	sbiw	r24, 0x01	; 1
    1c70:	f1 f7       	brne	.-4      	; 0x1c6e <LCD_sendCommand+0xca>
    1c72:	9e a7       	std	Y+46, r25	; 0x2e
    1c74:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c76:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c78:	98 a9       	ldd	r25, Y+48	; 0x30
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	98 ab       	std	Y+48, r25	; 0x30
    1c7e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c80:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c82:	98 a9       	ldd	r25, Y+48	; 0x30
    1c84:	00 97       	sbiw	r24, 0x00	; 0
    1c86:	69 f7       	brne	.-38     	; 0x1c62 <LCD_sendCommand+0xbe>
    1c88:	14 c0       	rjmp	.+40     	; 0x1cb2 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c8a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c8c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c8e:	8b a9       	ldd	r24, Y+51	; 0x33
    1c90:	9c a9       	ldd	r25, Y+52	; 0x34
    1c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	98 ab       	std	Y+48, r25	; 0x30
    1c9c:	8f a7       	std	Y+47, r24	; 0x2f
    1c9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ca0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ca2:	9c a7       	std	Y+44, r25	; 0x2c
    1ca4:	8b a7       	std	Y+43, r24	; 0x2b
    1ca6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ca8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	f1 f7       	brne	.-4      	; 0x1caa <LCD_sendCommand+0x106>
    1cae:	9c a7       	std	Y+44, r25	; 0x2c
    1cb0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms((double)1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1cb2:	83 e0       	ldi	r24, 0x03	; 3
    1cb4:	62 e0       	ldi	r22, 0x02	; 2
    1cb6:	41 e0       	ldi	r20, 0x01	; 1
    1cb8:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	a0 e8       	ldi	r26, 0x80	; 128
    1cc2:	bf e3       	ldi	r27, 0x3F	; 63
    1cc4:	8f a3       	std	Y+39, r24	; 0x27
    1cc6:	98 a7       	std	Y+40, r25	; 0x28
    1cc8:	a9 a7       	std	Y+41, r26	; 0x29
    1cca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ccc:	6f a1       	ldd	r22, Y+39	; 0x27
    1cce:	78 a5       	ldd	r23, Y+40	; 0x28
    1cd0:	89 a5       	ldd	r24, Y+41	; 0x29
    1cd2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	4a e7       	ldi	r20, 0x7A	; 122
    1cda:	53 e4       	ldi	r21, 0x43	; 67
    1cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	8b a3       	std	Y+35, r24	; 0x23
    1ce6:	9c a3       	std	Y+36, r25	; 0x24
    1ce8:	ad a3       	std	Y+37, r26	; 0x25
    1cea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cec:	6b a1       	ldd	r22, Y+35	; 0x23
    1cee:	7c a1       	ldd	r23, Y+36	; 0x24
    1cf0:	8d a1       	ldd	r24, Y+37	; 0x25
    1cf2:	9e a1       	ldd	r25, Y+38	; 0x26
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	40 e8       	ldi	r20, 0x80	; 128
    1cfa:	5f e3       	ldi	r21, 0x3F	; 63
    1cfc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d00:	88 23       	and	r24, r24
    1d02:	2c f4       	brge	.+10     	; 0x1d0e <LCD_sendCommand+0x16a>
		__ticks = 1;
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	9a a3       	std	Y+34, r25	; 0x22
    1d0a:	89 a3       	std	Y+33, r24	; 0x21
    1d0c:	3f c0       	rjmp	.+126    	; 0x1d8c <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1d0e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d10:	7c a1       	ldd	r23, Y+36	; 0x24
    1d12:	8d a1       	ldd	r24, Y+37	; 0x25
    1d14:	9e a1       	ldd	r25, Y+38	; 0x26
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	3f ef       	ldi	r19, 0xFF	; 255
    1d1a:	4f e7       	ldi	r20, 0x7F	; 127
    1d1c:	57 e4       	ldi	r21, 0x47	; 71
    1d1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d22:	18 16       	cp	r1, r24
    1d24:	4c f5       	brge	.+82     	; 0x1d78 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d26:	6f a1       	ldd	r22, Y+39	; 0x27
    1d28:	78 a5       	ldd	r23, Y+40	; 0x28
    1d2a:	89 a5       	ldd	r24, Y+41	; 0x29
    1d2c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	40 e2       	ldi	r20, 0x20	; 32
    1d34:	51 e4       	ldi	r21, 0x41	; 65
    1d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	bc 01       	movw	r22, r24
    1d40:	cd 01       	movw	r24, r26
    1d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	9a a3       	std	Y+34, r25	; 0x22
    1d4c:	89 a3       	std	Y+33, r24	; 0x21
    1d4e:	0f c0       	rjmp	.+30     	; 0x1d6e <LCD_sendCommand+0x1ca>
    1d50:	89 e1       	ldi	r24, 0x19	; 25
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	98 a3       	std	Y+32, r25	; 0x20
    1d56:	8f 8f       	std	Y+31, r24	; 0x1f
    1d58:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d5a:	98 a1       	ldd	r25, Y+32	; 0x20
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	f1 f7       	brne	.-4      	; 0x1d5c <LCD_sendCommand+0x1b8>
    1d60:	98 a3       	std	Y+32, r25	; 0x20
    1d62:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d64:	89 a1       	ldd	r24, Y+33	; 0x21
    1d66:	9a a1       	ldd	r25, Y+34	; 0x22
    1d68:	01 97       	sbiw	r24, 0x01	; 1
    1d6a:	9a a3       	std	Y+34, r25	; 0x22
    1d6c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d6e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d70:	9a a1       	ldd	r25, Y+34	; 0x22
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	69 f7       	brne	.-38     	; 0x1d50 <LCD_sendCommand+0x1ac>
    1d76:	14 c0       	rjmp	.+40     	; 0x1da0 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d78:	6b a1       	ldd	r22, Y+35	; 0x23
    1d7a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d7c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d7e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	9a a3       	std	Y+34, r25	; 0x22
    1d8a:	89 a3       	std	Y+33, r24	; 0x21
    1d8c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d8e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d90:	9e 8f       	std	Y+30, r25	; 0x1e
    1d92:	8d 8f       	std	Y+29, r24	; 0x1d
    1d94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d96:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d98:	01 97       	sbiw	r24, 0x01	; 1
    1d9a:	f1 f7       	brne	.-4      	; 0x1d98 <LCD_sendCommand+0x1f4>
    1d9c:	9e 8f       	std	Y+30, r25	; 0x1e
    1d9e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms((double)1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1da0:	82 e0       	ldi	r24, 0x02	; 2
    1da2:	69 ad       	ldd	r22, Y+57	; 0x39
    1da4:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <GPIO_writePort>
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	a0 e8       	ldi	r26, 0x80	; 128
    1dae:	bf e3       	ldi	r27, 0x3F	; 63
    1db0:	89 8f       	std	Y+25, r24	; 0x19
    1db2:	9a 8f       	std	Y+26, r25	; 0x1a
    1db4:	ab 8f       	std	Y+27, r26	; 0x1b
    1db6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db8:	69 8d       	ldd	r22, Y+25	; 0x19
    1dba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	4a e7       	ldi	r20, 0x7A	; 122
    1dc6:	53 e4       	ldi	r21, 0x43	; 67
    1dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	8d 8b       	std	Y+21, r24	; 0x15
    1dd2:	9e 8b       	std	Y+22, r25	; 0x16
    1dd4:	af 8b       	std	Y+23, r26	; 0x17
    1dd6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dd8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dda:	7e 89       	ldd	r23, Y+22	; 0x16
    1ddc:	8f 89       	ldd	r24, Y+23	; 0x17
    1dde:	98 8d       	ldd	r25, Y+24	; 0x18
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	40 e8       	ldi	r20, 0x80	; 128
    1de6:	5f e3       	ldi	r21, 0x3F	; 63
    1de8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dec:	88 23       	and	r24, r24
    1dee:	2c f4       	brge	.+10     	; 0x1dfa <LCD_sendCommand+0x256>
		__ticks = 1;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	9c 8b       	std	Y+20, r25	; 0x14
    1df6:	8b 8b       	std	Y+19, r24	; 0x13
    1df8:	3f c0       	rjmp	.+126    	; 0x1e78 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1dfa:	6d 89       	ldd	r22, Y+21	; 0x15
    1dfc:	7e 89       	ldd	r23, Y+22	; 0x16
    1dfe:	8f 89       	ldd	r24, Y+23	; 0x17
    1e00:	98 8d       	ldd	r25, Y+24	; 0x18
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	3f ef       	ldi	r19, 0xFF	; 255
    1e06:	4f e7       	ldi	r20, 0x7F	; 127
    1e08:	57 e4       	ldi	r21, 0x47	; 71
    1e0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e0e:	18 16       	cp	r1, r24
    1e10:	4c f5       	brge	.+82     	; 0x1e64 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e12:	69 8d       	ldd	r22, Y+25	; 0x19
    1e14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	40 e2       	ldi	r20, 0x20	; 32
    1e20:	51 e4       	ldi	r21, 0x41	; 65
    1e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	bc 01       	movw	r22, r24
    1e2c:	cd 01       	movw	r24, r26
    1e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	9c 8b       	std	Y+20, r25	; 0x14
    1e38:	8b 8b       	std	Y+19, r24	; 0x13
    1e3a:	0f c0       	rjmp	.+30     	; 0x1e5a <LCD_sendCommand+0x2b6>
    1e3c:	89 e1       	ldi	r24, 0x19	; 25
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	9a 8b       	std	Y+18, r25	; 0x12
    1e42:	89 8b       	std	Y+17, r24	; 0x11
    1e44:	89 89       	ldd	r24, Y+17	; 0x11
    1e46:	9a 89       	ldd	r25, Y+18	; 0x12
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	f1 f7       	brne	.-4      	; 0x1e48 <LCD_sendCommand+0x2a4>
    1e4c:	9a 8b       	std	Y+18, r25	; 0x12
    1e4e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e50:	8b 89       	ldd	r24, Y+19	; 0x13
    1e52:	9c 89       	ldd	r25, Y+20	; 0x14
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	9c 8b       	std	Y+20, r25	; 0x14
    1e58:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e5e:	00 97       	sbiw	r24, 0x00	; 0
    1e60:	69 f7       	brne	.-38     	; 0x1e3c <LCD_sendCommand+0x298>
    1e62:	14 c0       	rjmp	.+40     	; 0x1e8c <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e64:	6d 89       	ldd	r22, Y+21	; 0x15
    1e66:	7e 89       	ldd	r23, Y+22	; 0x16
    1e68:	8f 89       	ldd	r24, Y+23	; 0x17
    1e6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	9c 8b       	std	Y+20, r25	; 0x14
    1e76:	8b 8b       	std	Y+19, r24	; 0x13
    1e78:	8b 89       	ldd	r24, Y+19	; 0x13
    1e7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e7c:	98 8b       	std	Y+16, r25	; 0x10
    1e7e:	8f 87       	std	Y+15, r24	; 0x0f
    1e80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e82:	98 89       	ldd	r25, Y+16	; 0x10
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	f1 f7       	brne	.-4      	; 0x1e84 <LCD_sendCommand+0x2e0>
    1e88:	98 8b       	std	Y+16, r25	; 0x10
    1e8a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms((double)1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1e8c:	83 e0       	ldi	r24, 0x03	; 3
    1e8e:	62 e0       	ldi	r22, 0x02	; 2
    1e90:	40 e0       	ldi	r20, 0x00	; 0
    1e92:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	a0 e8       	ldi	r26, 0x80	; 128
    1e9c:	bf e3       	ldi	r27, 0x3F	; 63
    1e9e:	8b 87       	std	Y+11, r24	; 0x0b
    1ea0:	9c 87       	std	Y+12, r25	; 0x0c
    1ea2:	ad 87       	std	Y+13, r26	; 0x0d
    1ea4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	4a e7       	ldi	r20, 0x7A	; 122
    1eb4:	53 e4       	ldi	r21, 0x43	; 67
    1eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	8f 83       	std	Y+7, r24	; 0x07
    1ec0:	98 87       	std	Y+8, r25	; 0x08
    1ec2:	a9 87       	std	Y+9, r26	; 0x09
    1ec4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ec6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec8:	78 85       	ldd	r23, Y+8	; 0x08
    1eca:	89 85       	ldd	r24, Y+9	; 0x09
    1ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	40 e8       	ldi	r20, 0x80	; 128
    1ed4:	5f e3       	ldi	r21, 0x3F	; 63
    1ed6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eda:	88 23       	and	r24, r24
    1edc:	2c f4       	brge	.+10     	; 0x1ee8 <LCD_sendCommand+0x344>
		__ticks = 1;
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	9e 83       	std	Y+6, r25	; 0x06
    1ee4:	8d 83       	std	Y+5, r24	; 0x05
    1ee6:	3f c0       	rjmp	.+126    	; 0x1f66 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1ee8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eea:	78 85       	ldd	r23, Y+8	; 0x08
    1eec:	89 85       	ldd	r24, Y+9	; 0x09
    1eee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	3f ef       	ldi	r19, 0xFF	; 255
    1ef4:	4f e7       	ldi	r20, 0x7F	; 127
    1ef6:	57 e4       	ldi	r21, 0x47	; 71
    1ef8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1efc:	18 16       	cp	r1, r24
    1efe:	4c f5       	brge	.+82     	; 0x1f52 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	40 e2       	ldi	r20, 0x20	; 32
    1f0e:	51 e4       	ldi	r21, 0x41	; 65
    1f10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	bc 01       	movw	r22, r24
    1f1a:	cd 01       	movw	r24, r26
    1f1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	9e 83       	std	Y+6, r25	; 0x06
    1f26:	8d 83       	std	Y+5, r24	; 0x05
    1f28:	0f c0       	rjmp	.+30     	; 0x1f48 <LCD_sendCommand+0x3a4>
    1f2a:	89 e1       	ldi	r24, 0x19	; 25
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	9c 83       	std	Y+4, r25	; 0x04
    1f30:	8b 83       	std	Y+3, r24	; 0x03
    1f32:	8b 81       	ldd	r24, Y+3	; 0x03
    1f34:	9c 81       	ldd	r25, Y+4	; 0x04
    1f36:	01 97       	sbiw	r24, 0x01	; 1
    1f38:	f1 f7       	brne	.-4      	; 0x1f36 <LCD_sendCommand+0x392>
    1f3a:	9c 83       	std	Y+4, r25	; 0x04
    1f3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f40:	9e 81       	ldd	r25, Y+6	; 0x06
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	9e 83       	std	Y+6, r25	; 0x06
    1f46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f48:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4c:	00 97       	sbiw	r24, 0x00	; 0
    1f4e:	69 f7       	brne	.-38     	; 0x1f2a <LCD_sendCommand+0x386>
    1f50:	14 c0       	rjmp	.+40     	; 0x1f7a <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f52:	6f 81       	ldd	r22, Y+7	; 0x07
    1f54:	78 85       	ldd	r23, Y+8	; 0x08
    1f56:	89 85       	ldd	r24, Y+9	; 0x09
    1f58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	9e 83       	std	Y+6, r25	; 0x06
    1f64:	8d 83       	std	Y+5, r24	; 0x05
    1f66:	8d 81       	ldd	r24, Y+5	; 0x05
    1f68:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6a:	9a 83       	std	Y+2, r25	; 0x02
    1f6c:	89 83       	std	Y+1, r24	; 0x01
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
    1f70:	9a 81       	ldd	r25, Y+2	; 0x02
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	f1 f7       	brne	.-4      	; 0x1f72 <LCD_sendCommand+0x3ce>
    1f76:	9a 83       	std	Y+2, r25	; 0x02
    1f78:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms((double)1); /* delay for processing Th = 13ns */
}
    1f7a:	e9 96       	adiw	r28, 0x39	; 57
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	f8 94       	cli
    1f80:	de bf       	out	0x3e, r29	; 62
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	cd bf       	out	0x3d, r28	; 61
    1f86:	cf 91       	pop	r28
    1f88:	df 91       	pop	r29
    1f8a:	08 95       	ret

00001f8c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1f8c:	df 93       	push	r29
    1f8e:	cf 93       	push	r28
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
    1f94:	e9 97       	sbiw	r28, 0x39	; 57
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	f8 94       	cli
    1f9a:	de bf       	out	0x3e, r29	; 62
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	cd bf       	out	0x3d, r28	; 61
    1fa0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1fa2:	83 e0       	ldi	r24, 0x03	; 3
    1fa4:	60 e0       	ldi	r22, 0x00	; 0
    1fa6:	41 e0       	ldi	r20, 0x01	; 1
    1fa8:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1fac:	83 e0       	ldi	r24, 0x03	; 3
    1fae:	61 e0       	ldi	r22, 0x01	; 1
    1fb0:	40 e0       	ldi	r20, 0x00	; 0
    1fb2:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	a0 e8       	ldi	r26, 0x80	; 128
    1fbc:	bf e3       	ldi	r27, 0x3F	; 63
    1fbe:	8d ab       	std	Y+53, r24	; 0x35
    1fc0:	9e ab       	std	Y+54, r25	; 0x36
    1fc2:	af ab       	std	Y+55, r26	; 0x37
    1fc4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc6:	6d a9       	ldd	r22, Y+53	; 0x35
    1fc8:	7e a9       	ldd	r23, Y+54	; 0x36
    1fca:	8f a9       	ldd	r24, Y+55	; 0x37
    1fcc:	98 ad       	ldd	r25, Y+56	; 0x38
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	4a e7       	ldi	r20, 0x7A	; 122
    1fd4:	53 e4       	ldi	r21, 0x43	; 67
    1fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	89 ab       	std	Y+49, r24	; 0x31
    1fe0:	9a ab       	std	Y+50, r25	; 0x32
    1fe2:	ab ab       	std	Y+51, r26	; 0x33
    1fe4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fe6:	69 a9       	ldd	r22, Y+49	; 0x31
    1fe8:	7a a9       	ldd	r23, Y+50	; 0x32
    1fea:	8b a9       	ldd	r24, Y+51	; 0x33
    1fec:	9c a9       	ldd	r25, Y+52	; 0x34
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 e8       	ldi	r20, 0x80	; 128
    1ff4:	5f e3       	ldi	r21, 0x3F	; 63
    1ff6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ffa:	88 23       	and	r24, r24
    1ffc:	2c f4       	brge	.+10     	; 0x2008 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	98 ab       	std	Y+48, r25	; 0x30
    2004:	8f a7       	std	Y+47, r24	; 0x2f
    2006:	3f c0       	rjmp	.+126    	; 0x2086 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    2008:	69 a9       	ldd	r22, Y+49	; 0x31
    200a:	7a a9       	ldd	r23, Y+50	; 0x32
    200c:	8b a9       	ldd	r24, Y+51	; 0x33
    200e:	9c a9       	ldd	r25, Y+52	; 0x34
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	3f ef       	ldi	r19, 0xFF	; 255
    2014:	4f e7       	ldi	r20, 0x7F	; 127
    2016:	57 e4       	ldi	r21, 0x47	; 71
    2018:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    201c:	18 16       	cp	r1, r24
    201e:	4c f5       	brge	.+82     	; 0x2072 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2020:	6d a9       	ldd	r22, Y+53	; 0x35
    2022:	7e a9       	ldd	r23, Y+54	; 0x36
    2024:	8f a9       	ldd	r24, Y+55	; 0x37
    2026:	98 ad       	ldd	r25, Y+56	; 0x38
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e2       	ldi	r20, 0x20	; 32
    202e:	51 e4       	ldi	r21, 0x41	; 65
    2030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	bc 01       	movw	r22, r24
    203a:	cd 01       	movw	r24, r26
    203c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	98 ab       	std	Y+48, r25	; 0x30
    2046:	8f a7       	std	Y+47, r24	; 0x2f
    2048:	0f c0       	rjmp	.+30     	; 0x2068 <LCD_displayCharacter+0xdc>
    204a:	89 e1       	ldi	r24, 0x19	; 25
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	9e a7       	std	Y+46, r25	; 0x2e
    2050:	8d a7       	std	Y+45, r24	; 0x2d
    2052:	8d a5       	ldd	r24, Y+45	; 0x2d
    2054:	9e a5       	ldd	r25, Y+46	; 0x2e
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	f1 f7       	brne	.-4      	; 0x2056 <LCD_displayCharacter+0xca>
    205a:	9e a7       	std	Y+46, r25	; 0x2e
    205c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2060:	98 a9       	ldd	r25, Y+48	; 0x30
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	98 ab       	std	Y+48, r25	; 0x30
    2066:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2068:	8f a5       	ldd	r24, Y+47	; 0x2f
    206a:	98 a9       	ldd	r25, Y+48	; 0x30
    206c:	00 97       	sbiw	r24, 0x00	; 0
    206e:	69 f7       	brne	.-38     	; 0x204a <LCD_displayCharacter+0xbe>
    2070:	14 c0       	rjmp	.+40     	; 0x209a <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2072:	69 a9       	ldd	r22, Y+49	; 0x31
    2074:	7a a9       	ldd	r23, Y+50	; 0x32
    2076:	8b a9       	ldd	r24, Y+51	; 0x33
    2078:	9c a9       	ldd	r25, Y+52	; 0x34
    207a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	98 ab       	std	Y+48, r25	; 0x30
    2084:	8f a7       	std	Y+47, r24	; 0x2f
    2086:	8f a5       	ldd	r24, Y+47	; 0x2f
    2088:	98 a9       	ldd	r25, Y+48	; 0x30
    208a:	9c a7       	std	Y+44, r25	; 0x2c
    208c:	8b a7       	std	Y+43, r24	; 0x2b
    208e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2090:	9c a5       	ldd	r25, Y+44	; 0x2c
    2092:	01 97       	sbiw	r24, 0x01	; 1
    2094:	f1 f7       	brne	.-4      	; 0x2092 <LCD_displayCharacter+0x106>
    2096:	9c a7       	std	Y+44, r25	; 0x2c
    2098:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms((double)1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    209a:	83 e0       	ldi	r24, 0x03	; 3
    209c:	62 e0       	ldi	r22, 0x02	; 2
    209e:	41 e0       	ldi	r20, 0x01	; 1
    20a0:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	a0 e8       	ldi	r26, 0x80	; 128
    20aa:	bf e3       	ldi	r27, 0x3F	; 63
    20ac:	8f a3       	std	Y+39, r24	; 0x27
    20ae:	98 a7       	std	Y+40, r25	; 0x28
    20b0:	a9 a7       	std	Y+41, r26	; 0x29
    20b2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b4:	6f a1       	ldd	r22, Y+39	; 0x27
    20b6:	78 a5       	ldd	r23, Y+40	; 0x28
    20b8:	89 a5       	ldd	r24, Y+41	; 0x29
    20ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	4a e7       	ldi	r20, 0x7A	; 122
    20c2:	53 e4       	ldi	r21, 0x43	; 67
    20c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	8b a3       	std	Y+35, r24	; 0x23
    20ce:	9c a3       	std	Y+36, r25	; 0x24
    20d0:	ad a3       	std	Y+37, r26	; 0x25
    20d2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20d4:	6b a1       	ldd	r22, Y+35	; 0x23
    20d6:	7c a1       	ldd	r23, Y+36	; 0x24
    20d8:	8d a1       	ldd	r24, Y+37	; 0x25
    20da:	9e a1       	ldd	r25, Y+38	; 0x26
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	40 e8       	ldi	r20, 0x80	; 128
    20e2:	5f e3       	ldi	r21, 0x3F	; 63
    20e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20e8:	88 23       	and	r24, r24
    20ea:	2c f4       	brge	.+10     	; 0x20f6 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	9a a3       	std	Y+34, r25	; 0x22
    20f2:	89 a3       	std	Y+33, r24	; 0x21
    20f4:	3f c0       	rjmp	.+126    	; 0x2174 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    20f6:	6b a1       	ldd	r22, Y+35	; 0x23
    20f8:	7c a1       	ldd	r23, Y+36	; 0x24
    20fa:	8d a1       	ldd	r24, Y+37	; 0x25
    20fc:	9e a1       	ldd	r25, Y+38	; 0x26
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	3f ef       	ldi	r19, 0xFF	; 255
    2102:	4f e7       	ldi	r20, 0x7F	; 127
    2104:	57 e4       	ldi	r21, 0x47	; 71
    2106:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    210a:	18 16       	cp	r1, r24
    210c:	4c f5       	brge	.+82     	; 0x2160 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210e:	6f a1       	ldd	r22, Y+39	; 0x27
    2110:	78 a5       	ldd	r23, Y+40	; 0x28
    2112:	89 a5       	ldd	r24, Y+41	; 0x29
    2114:	9a a5       	ldd	r25, Y+42	; 0x2a
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	40 e2       	ldi	r20, 0x20	; 32
    211c:	51 e4       	ldi	r21, 0x41	; 65
    211e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	bc 01       	movw	r22, r24
    2128:	cd 01       	movw	r24, r26
    212a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	9a a3       	std	Y+34, r25	; 0x22
    2134:	89 a3       	std	Y+33, r24	; 0x21
    2136:	0f c0       	rjmp	.+30     	; 0x2156 <LCD_displayCharacter+0x1ca>
    2138:	89 e1       	ldi	r24, 0x19	; 25
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	98 a3       	std	Y+32, r25	; 0x20
    213e:	8f 8f       	std	Y+31, r24	; 0x1f
    2140:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2142:	98 a1       	ldd	r25, Y+32	; 0x20
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	f1 f7       	brne	.-4      	; 0x2144 <LCD_displayCharacter+0x1b8>
    2148:	98 a3       	std	Y+32, r25	; 0x20
    214a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214c:	89 a1       	ldd	r24, Y+33	; 0x21
    214e:	9a a1       	ldd	r25, Y+34	; 0x22
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	9a a3       	std	Y+34, r25	; 0x22
    2154:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2156:	89 a1       	ldd	r24, Y+33	; 0x21
    2158:	9a a1       	ldd	r25, Y+34	; 0x22
    215a:	00 97       	sbiw	r24, 0x00	; 0
    215c:	69 f7       	brne	.-38     	; 0x2138 <LCD_displayCharacter+0x1ac>
    215e:	14 c0       	rjmp	.+40     	; 0x2188 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2160:	6b a1       	ldd	r22, Y+35	; 0x23
    2162:	7c a1       	ldd	r23, Y+36	; 0x24
    2164:	8d a1       	ldd	r24, Y+37	; 0x25
    2166:	9e a1       	ldd	r25, Y+38	; 0x26
    2168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	9a a3       	std	Y+34, r25	; 0x22
    2172:	89 a3       	std	Y+33, r24	; 0x21
    2174:	89 a1       	ldd	r24, Y+33	; 0x21
    2176:	9a a1       	ldd	r25, Y+34	; 0x22
    2178:	9e 8f       	std	Y+30, r25	; 0x1e
    217a:	8d 8f       	std	Y+29, r24	; 0x1d
    217c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    217e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	f1 f7       	brne	.-4      	; 0x2180 <LCD_displayCharacter+0x1f4>
    2184:	9e 8f       	std	Y+30, r25	; 0x1e
    2186:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms((double)1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2188:	82 e0       	ldi	r24, 0x02	; 2
    218a:	69 ad       	ldd	r22, Y+57	; 0x39
    218c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <GPIO_writePort>
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	a0 e8       	ldi	r26, 0x80	; 128
    2196:	bf e3       	ldi	r27, 0x3F	; 63
    2198:	89 8f       	std	Y+25, r24	; 0x19
    219a:	9a 8f       	std	Y+26, r25	; 0x1a
    219c:	ab 8f       	std	Y+27, r26	; 0x1b
    219e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a0:	69 8d       	ldd	r22, Y+25	; 0x19
    21a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	4a e7       	ldi	r20, 0x7A	; 122
    21ae:	53 e4       	ldi	r21, 0x43	; 67
    21b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	8d 8b       	std	Y+21, r24	; 0x15
    21ba:	9e 8b       	std	Y+22, r25	; 0x16
    21bc:	af 8b       	std	Y+23, r26	; 0x17
    21be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21c0:	6d 89       	ldd	r22, Y+21	; 0x15
    21c2:	7e 89       	ldd	r23, Y+22	; 0x16
    21c4:	8f 89       	ldd	r24, Y+23	; 0x17
    21c6:	98 8d       	ldd	r25, Y+24	; 0x18
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	40 e8       	ldi	r20, 0x80	; 128
    21ce:	5f e3       	ldi	r21, 0x3F	; 63
    21d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21d4:	88 23       	and	r24, r24
    21d6:	2c f4       	brge	.+10     	; 0x21e2 <LCD_displayCharacter+0x256>
		__ticks = 1;
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	9c 8b       	std	Y+20, r25	; 0x14
    21de:	8b 8b       	std	Y+19, r24	; 0x13
    21e0:	3f c0       	rjmp	.+126    	; 0x2260 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    21e2:	6d 89       	ldd	r22, Y+21	; 0x15
    21e4:	7e 89       	ldd	r23, Y+22	; 0x16
    21e6:	8f 89       	ldd	r24, Y+23	; 0x17
    21e8:	98 8d       	ldd	r25, Y+24	; 0x18
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	3f ef       	ldi	r19, 0xFF	; 255
    21ee:	4f e7       	ldi	r20, 0x7F	; 127
    21f0:	57 e4       	ldi	r21, 0x47	; 71
    21f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21f6:	18 16       	cp	r1, r24
    21f8:	4c f5       	brge	.+82     	; 0x224c <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21fa:	69 8d       	ldd	r22, Y+25	; 0x19
    21fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2200:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	40 e2       	ldi	r20, 0x20	; 32
    2208:	51 e4       	ldi	r21, 0x41	; 65
    220a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	bc 01       	movw	r22, r24
    2214:	cd 01       	movw	r24, r26
    2216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	9c 8b       	std	Y+20, r25	; 0x14
    2220:	8b 8b       	std	Y+19, r24	; 0x13
    2222:	0f c0       	rjmp	.+30     	; 0x2242 <LCD_displayCharacter+0x2b6>
    2224:	89 e1       	ldi	r24, 0x19	; 25
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	9a 8b       	std	Y+18, r25	; 0x12
    222a:	89 8b       	std	Y+17, r24	; 0x11
    222c:	89 89       	ldd	r24, Y+17	; 0x11
    222e:	9a 89       	ldd	r25, Y+18	; 0x12
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	f1 f7       	brne	.-4      	; 0x2230 <LCD_displayCharacter+0x2a4>
    2234:	9a 8b       	std	Y+18, r25	; 0x12
    2236:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2238:	8b 89       	ldd	r24, Y+19	; 0x13
    223a:	9c 89       	ldd	r25, Y+20	; 0x14
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	9c 8b       	std	Y+20, r25	; 0x14
    2240:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2242:	8b 89       	ldd	r24, Y+19	; 0x13
    2244:	9c 89       	ldd	r25, Y+20	; 0x14
    2246:	00 97       	sbiw	r24, 0x00	; 0
    2248:	69 f7       	brne	.-38     	; 0x2224 <LCD_displayCharacter+0x298>
    224a:	14 c0       	rjmp	.+40     	; 0x2274 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    224c:	6d 89       	ldd	r22, Y+21	; 0x15
    224e:	7e 89       	ldd	r23, Y+22	; 0x16
    2250:	8f 89       	ldd	r24, Y+23	; 0x17
    2252:	98 8d       	ldd	r25, Y+24	; 0x18
    2254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	9c 8b       	std	Y+20, r25	; 0x14
    225e:	8b 8b       	std	Y+19, r24	; 0x13
    2260:	8b 89       	ldd	r24, Y+19	; 0x13
    2262:	9c 89       	ldd	r25, Y+20	; 0x14
    2264:	98 8b       	std	Y+16, r25	; 0x10
    2266:	8f 87       	std	Y+15, r24	; 0x0f
    2268:	8f 85       	ldd	r24, Y+15	; 0x0f
    226a:	98 89       	ldd	r25, Y+16	; 0x10
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	f1 f7       	brne	.-4      	; 0x226c <LCD_displayCharacter+0x2e0>
    2270:	98 8b       	std	Y+16, r25	; 0x10
    2272:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms((double)1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2274:	83 e0       	ldi	r24, 0x03	; 3
    2276:	62 e0       	ldi	r22, 0x02	; 2
    2278:	40 e0       	ldi	r20, 0x00	; 0
    227a:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	a0 e8       	ldi	r26, 0x80	; 128
    2284:	bf e3       	ldi	r27, 0x3F	; 63
    2286:	8b 87       	std	Y+11, r24	; 0x0b
    2288:	9c 87       	std	Y+12, r25	; 0x0c
    228a:	ad 87       	std	Y+13, r26	; 0x0d
    228c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    228e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2290:	7c 85       	ldd	r23, Y+12	; 0x0c
    2292:	8d 85       	ldd	r24, Y+13	; 0x0d
    2294:	9e 85       	ldd	r25, Y+14	; 0x0e
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	4a e7       	ldi	r20, 0x7A	; 122
    229c:	53 e4       	ldi	r21, 0x43	; 67
    229e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	8f 83       	std	Y+7, r24	; 0x07
    22a8:	98 87       	std	Y+8, r25	; 0x08
    22aa:	a9 87       	std	Y+9, r26	; 0x09
    22ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22ae:	6f 81       	ldd	r22, Y+7	; 0x07
    22b0:	78 85       	ldd	r23, Y+8	; 0x08
    22b2:	89 85       	ldd	r24, Y+9	; 0x09
    22b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	40 e8       	ldi	r20, 0x80	; 128
    22bc:	5f e3       	ldi	r21, 0x3F	; 63
    22be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22c2:	88 23       	and	r24, r24
    22c4:	2c f4       	brge	.+10     	; 0x22d0 <LCD_displayCharacter+0x344>
		__ticks = 1;
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	9e 83       	std	Y+6, r25	; 0x06
    22cc:	8d 83       	std	Y+5, r24	; 0x05
    22ce:	3f c0       	rjmp	.+126    	; 0x234e <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    22d0:	6f 81       	ldd	r22, Y+7	; 0x07
    22d2:	78 85       	ldd	r23, Y+8	; 0x08
    22d4:	89 85       	ldd	r24, Y+9	; 0x09
    22d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	3f ef       	ldi	r19, 0xFF	; 255
    22dc:	4f e7       	ldi	r20, 0x7F	; 127
    22de:	57 e4       	ldi	r21, 0x47	; 71
    22e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22e4:	18 16       	cp	r1, r24
    22e6:	4c f5       	brge	.+82     	; 0x233a <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	40 e2       	ldi	r20, 0x20	; 32
    22f6:	51 e4       	ldi	r21, 0x41	; 65
    22f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	bc 01       	movw	r22, r24
    2302:	cd 01       	movw	r24, r26
    2304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	9e 83       	std	Y+6, r25	; 0x06
    230e:	8d 83       	std	Y+5, r24	; 0x05
    2310:	0f c0       	rjmp	.+30     	; 0x2330 <LCD_displayCharacter+0x3a4>
    2312:	89 e1       	ldi	r24, 0x19	; 25
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	9c 83       	std	Y+4, r25	; 0x04
    2318:	8b 83       	std	Y+3, r24	; 0x03
    231a:	8b 81       	ldd	r24, Y+3	; 0x03
    231c:	9c 81       	ldd	r25, Y+4	; 0x04
    231e:	01 97       	sbiw	r24, 0x01	; 1
    2320:	f1 f7       	brne	.-4      	; 0x231e <LCD_displayCharacter+0x392>
    2322:	9c 83       	std	Y+4, r25	; 0x04
    2324:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2326:	8d 81       	ldd	r24, Y+5	; 0x05
    2328:	9e 81       	ldd	r25, Y+6	; 0x06
    232a:	01 97       	sbiw	r24, 0x01	; 1
    232c:	9e 83       	std	Y+6, r25	; 0x06
    232e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2330:	8d 81       	ldd	r24, Y+5	; 0x05
    2332:	9e 81       	ldd	r25, Y+6	; 0x06
    2334:	00 97       	sbiw	r24, 0x00	; 0
    2336:	69 f7       	brne	.-38     	; 0x2312 <LCD_displayCharacter+0x386>
    2338:	14 c0       	rjmp	.+40     	; 0x2362 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    233a:	6f 81       	ldd	r22, Y+7	; 0x07
    233c:	78 85       	ldd	r23, Y+8	; 0x08
    233e:	89 85       	ldd	r24, Y+9	; 0x09
    2340:	9a 85       	ldd	r25, Y+10	; 0x0a
    2342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	9e 83       	std	Y+6, r25	; 0x06
    234c:	8d 83       	std	Y+5, r24	; 0x05
    234e:	8d 81       	ldd	r24, Y+5	; 0x05
    2350:	9e 81       	ldd	r25, Y+6	; 0x06
    2352:	9a 83       	std	Y+2, r25	; 0x02
    2354:	89 83       	std	Y+1, r24	; 0x01
    2356:	89 81       	ldd	r24, Y+1	; 0x01
    2358:	9a 81       	ldd	r25, Y+2	; 0x02
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	f1 f7       	brne	.-4      	; 0x235a <LCD_displayCharacter+0x3ce>
    235e:	9a 83       	std	Y+2, r25	; 0x02
    2360:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms((double)1); /* delay for processing Th = 13ns */
}
    2362:	e9 96       	adiw	r28, 0x39	; 57
    2364:	0f b6       	in	r0, 0x3f	; 63
    2366:	f8 94       	cli
    2368:	de bf       	out	0x3e, r29	; 62
    236a:	0f be       	out	0x3f, r0	; 63
    236c:	cd bf       	out	0x3d, r28	; 61
    236e:	cf 91       	pop	r28
    2370:	df 91       	pop	r29
    2372:	08 95       	ret

00002374 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char Str[])
{
    2374:	df 93       	push	r29
    2376:	cf 93       	push	r28
    2378:	00 d0       	rcall	.+0      	; 0x237a <LCD_displayString+0x6>
    237a:	0f 92       	push	r0
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
    2380:	9b 83       	std	Y+3, r25	; 0x03
    2382:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2384:	19 82       	std	Y+1, r1	; 0x01
    2386:	0e c0       	rjmp	.+28     	; 0x23a4 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2388:	89 81       	ldd	r24, Y+1	; 0x01
    238a:	28 2f       	mov	r18, r24
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	8a 81       	ldd	r24, Y+2	; 0x02
    2390:	9b 81       	ldd	r25, Y+3	; 0x03
    2392:	fc 01       	movw	r30, r24
    2394:	e2 0f       	add	r30, r18
    2396:	f3 1f       	adc	r31, r19
    2398:	80 81       	ld	r24, Z
    239a:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <LCD_displayCharacter>
		i++;
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	8f 5f       	subi	r24, 0xFF	; 255
    23a2:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char Str[])
{
	uint8 i = 0;
	while(Str[i] != '\0')
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	28 2f       	mov	r18, r24
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	8a 81       	ldd	r24, Y+2	; 0x02
    23ac:	9b 81       	ldd	r25, Y+3	; 0x03
    23ae:	fc 01       	movw	r30, r24
    23b0:	e2 0f       	add	r30, r18
    23b2:	f3 1f       	adc	r31, r19
    23b4:	80 81       	ld	r24, Z
    23b6:	88 23       	and	r24, r24
    23b8:	39 f7       	brne	.-50     	; 0x2388 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	0f 90       	pop	r0
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	00 d0       	rcall	.+0      	; 0x23cc <LCD_moveCursor+0x6>
    23cc:	00 d0       	rcall	.+0      	; 0x23ce <LCD_moveCursor+0x8>
    23ce:	0f 92       	push	r0
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
    23d4:	8a 83       	std	Y+2, r24	; 0x02
    23d6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    23d8:	8a 81       	ldd	r24, Y+2	; 0x02
    23da:	28 2f       	mov	r18, r24
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	3d 83       	std	Y+5, r19	; 0x05
    23e0:	2c 83       	std	Y+4, r18	; 0x04
    23e2:	8c 81       	ldd	r24, Y+4	; 0x04
    23e4:	9d 81       	ldd	r25, Y+5	; 0x05
    23e6:	81 30       	cpi	r24, 0x01	; 1
    23e8:	91 05       	cpc	r25, r1
    23ea:	c1 f0       	breq	.+48     	; 0x241c <LCD_moveCursor+0x56>
    23ec:	2c 81       	ldd	r18, Y+4	; 0x04
    23ee:	3d 81       	ldd	r19, Y+5	; 0x05
    23f0:	22 30       	cpi	r18, 0x02	; 2
    23f2:	31 05       	cpc	r19, r1
    23f4:	2c f4       	brge	.+10     	; 0x2400 <LCD_moveCursor+0x3a>
    23f6:	8c 81       	ldd	r24, Y+4	; 0x04
    23f8:	9d 81       	ldd	r25, Y+5	; 0x05
    23fa:	00 97       	sbiw	r24, 0x00	; 0
    23fc:	61 f0       	breq	.+24     	; 0x2416 <LCD_moveCursor+0x50>
    23fe:	19 c0       	rjmp	.+50     	; 0x2432 <LCD_moveCursor+0x6c>
    2400:	2c 81       	ldd	r18, Y+4	; 0x04
    2402:	3d 81       	ldd	r19, Y+5	; 0x05
    2404:	22 30       	cpi	r18, 0x02	; 2
    2406:	31 05       	cpc	r19, r1
    2408:	69 f0       	breq	.+26     	; 0x2424 <LCD_moveCursor+0x5e>
    240a:	8c 81       	ldd	r24, Y+4	; 0x04
    240c:	9d 81       	ldd	r25, Y+5	; 0x05
    240e:	83 30       	cpi	r24, 0x03	; 3
    2410:	91 05       	cpc	r25, r1
    2412:	61 f0       	breq	.+24     	; 0x242c <LCD_moveCursor+0x66>
    2414:	0e c0       	rjmp	.+28     	; 0x2432 <LCD_moveCursor+0x6c>
	{
		case (uint8)0:
			lcd_memory_address=col;
    2416:	8b 81       	ldd	r24, Y+3	; 0x03
    2418:	89 83       	std	Y+1, r24	; 0x01
    241a:	0b c0       	rjmp	.+22     	; 0x2432 <LCD_moveCursor+0x6c>
				break;
		case (uint8)1:
			lcd_memory_address=col+(uint8)0x40;
    241c:	8b 81       	ldd	r24, Y+3	; 0x03
    241e:	80 5c       	subi	r24, 0xC0	; 192
    2420:	89 83       	std	Y+1, r24	; 0x01
    2422:	07 c0       	rjmp	.+14     	; 0x2432 <LCD_moveCursor+0x6c>
				break;
		case (uint8)2:
			lcd_memory_address=col+(uint8)0x10;
    2424:	8b 81       	ldd	r24, Y+3	; 0x03
    2426:	80 5f       	subi	r24, 0xF0	; 240
    2428:	89 83       	std	Y+1, r24	; 0x01
    242a:	03 c0       	rjmp	.+6      	; 0x2432 <LCD_moveCursor+0x6c>
				break;
		case (uint8)3:
			lcd_memory_address=col+(uint8)0x50;
    242c:	8b 81       	ldd	r24, Y+3	; 0x03
    242e:	80 5b       	subi	r24, 0xB0	; 176
    2430:	89 83       	std	Y+1, r24	; 0x01
				break;
		default:
		    break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	80 68       	ori	r24, 0x80	; 128
    2436:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <LCD_sendCommand>
}
    243a:	0f 90       	pop	r0
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	08 95       	ret

0000244a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	00 d0       	rcall	.+0      	; 0x2450 <LCD_displayStringRowColumn+0x6>
    2450:	00 d0       	rcall	.+0      	; 0x2452 <LCD_displayStringRowColumn+0x8>
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    2456:	89 83       	std	Y+1, r24	; 0x01
    2458:	6a 83       	std	Y+2, r22	; 0x02
    245a:	5c 83       	std	Y+4, r21	; 0x04
    245c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	6a 81       	ldd	r22, Y+2	; 0x02
    2462:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2466:	8b 81       	ldd	r24, Y+3	; 0x03
    2468:	9c 81       	ldd	r25, Y+4	; 0x04
    246a:	0e 94 ba 11 	call	0x2374	; 0x2374 <LCD_displayString>
}
    246e:	0f 90       	pop	r0
    2470:	0f 90       	pop	r0
    2472:	0f 90       	pop	r0
    2474:	0f 90       	pop	r0
    2476:	cf 91       	pop	r28
    2478:	df 91       	pop	r29
    247a:	08 95       	ret

0000247c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(sint32 data)
{
    247c:	df 93       	push	r29
    247e:	cf 93       	push	r28
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
    2484:	64 97       	sbiw	r28, 0x14	; 20
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	f8 94       	cli
    248a:	de bf       	out	0x3e, r29	; 62
    248c:	0f be       	out	0x3f, r0	; 63
    248e:	cd bf       	out	0x3d, r28	; 61
    2490:	69 8b       	std	Y+17, r22	; 0x11
    2492:	7a 8b       	std	Y+18, r23	; 0x12
    2494:	8b 8b       	std	Y+19, r24	; 0x13
    2496:	9c 8b       	std	Y+20, r25	; 0x14
   char buff[16]={0}; /* String to hold the ascii result */
    2498:	80 e1       	ldi	r24, 0x10	; 16
    249a:	fe 01       	movw	r30, r28
    249c:	31 96       	adiw	r30, 0x01	; 1
    249e:	df 01       	movw	r26, r30
    24a0:	98 2f       	mov	r25, r24
    24a2:	1d 92       	st	X+, r1
    24a4:	9a 95       	dec	r25
    24a6:	e9 f7       	brne	.-6      	; 0x24a2 <LCD_intgerToString+0x26>
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    24a8:	89 89       	ldd	r24, Y+17	; 0x11
    24aa:	9a 89       	ldd	r25, Y+18	; 0x12
    24ac:	9e 01       	movw	r18, r28
    24ae:	2f 5f       	subi	r18, 0xFF	; 255
    24b0:	3f 4f       	sbci	r19, 0xFF	; 255
    24b2:	b9 01       	movw	r22, r18
    24b4:	4a e0       	ldi	r20, 0x0A	; 10
    24b6:	50 e0       	ldi	r21, 0x00	; 0
    24b8:	0e 94 68 14 	call	0x28d0	; 0x28d0 <itoa>
   LCD_displayString(buff); /* Display the string */
    24bc:	ce 01       	movw	r24, r28
    24be:	01 96       	adiw	r24, 0x01	; 1
    24c0:	0e 94 ba 11 	call	0x2374	; 0x2374 <LCD_displayString>
}
    24c4:	64 96       	adiw	r28, 0x14	; 20
    24c6:	0f b6       	in	r0, 0x3f	; 63
    24c8:	f8 94       	cli
    24ca:	de bf       	out	0x3e, r29	; 62
    24cc:	0f be       	out	0x3f, r0	; 63
    24ce:	cd bf       	out	0x3d, r28	; 61
    24d0:	cf 91       	pop	r28
    24d2:	df 91       	pop	r29
    24d4:	08 95       	ret

000024d6 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    24d6:	df 93       	push	r29
    24d8:	cf 93       	push	r28
    24da:	cd b7       	in	r28, 0x3d	; 61
    24dc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <LCD_sendCommand>
}
    24e4:	cf 91       	pop	r28
    24e6:	df 91       	pop	r29
    24e8:	08 95       	ret

000024ea <DcMotor_Init>:

#include "dc_motor.h"

/* this function set pin direction*/
void DcMotor_Init(void){
    24ea:	df 93       	push	r29
    24ec:	cf 93       	push	r28
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
GPIO_setupPinDirection(MOTOR_PORT, MOTOR_PIN1,PIN_OUTPUT);
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	60 e0       	ldi	r22, 0x00	; 0
    24f6:	41 e0       	ldi	r20, 0x01	; 1
    24f8:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>
GPIO_setupPinDirection(MOTOR_PORT, MOTOR_PIN2,PIN_OUTPUT);
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	61 e0       	ldi	r22, 0x01	; 1
    2500:	41 e0       	ldi	r20, 0x01	; 1
    2502:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>
GPIO_setupPinDirection(MOTOR_PORT_ENABLE_PIN, MOTOR_ENABLE_PIN,PIN_OUTPUT);
    2506:	83 e0       	ldi	r24, 0x03	; 3
    2508:	67 e0       	ldi	r22, 0x07	; 7
    250a:	41 e0       	ldi	r20, 0x01	; 1
    250c:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>
}
    2510:	cf 91       	pop	r28
    2512:	df 91       	pop	r29
    2514:	08 95       	ret

00002516 <DcMotor_Rotate>:

/* this function write the value of the pin*/
void DcMotor_Rotate(DcMotor_State state,uint8 speed){
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	00 d0       	rcall	.+0      	; 0x251c <DcMotor_Rotate+0x6>
    251c:	cd b7       	in	r28, 0x3d	; 61
    251e:	de b7       	in	r29, 0x3e	; 62
    2520:	89 83       	std	Y+1, r24	; 0x01
    2522:	6a 83       	std	Y+2, r22	; 0x02

	GPIO_writePin(MOTOR_PORT, MOTOR_PIN1,(uint8)(state)&(uint8)1);
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	98 2f       	mov	r25, r24
    2528:	91 70       	andi	r25, 0x01	; 1
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	60 e0       	ldi	r22, 0x00	; 0
    252e:	49 2f       	mov	r20, r25
    2530:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT, MOTOR_PIN2,(((uint8)state)&((uint8)1<<1)));
    2534:	89 81       	ldd	r24, Y+1	; 0x01
    2536:	98 2f       	mov	r25, r24
    2538:	92 70       	andi	r25, 0x02	; 2
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	61 e0       	ldi	r22, 0x01	; 1
    253e:	49 2f       	mov	r20, r25
    2540:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>

	PWM_Timer2_Start(speed);
    2544:	8a 81       	ldd	r24, Y+2	; 0x02
    2546:	0e 94 67 07 	call	0xece	; 0xece <PWM_Timer2_Start>

}
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	cf 91       	pop	r28
    2550:	df 91       	pop	r29
    2552:	08 95       	ret

00002554 <button_init>:
 * Description :
 * Setup the direction of the required button to  input.
 * Setup the pull up or tri state
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void button_init(uint8 port_num, uint8 pin_num,BUTTON_DefualtInputType DefualtInput){
    2554:	df 93       	push	r29
    2556:	cf 93       	push	r28
    2558:	00 d0       	rcall	.+0      	; 0x255a <button_init+0x6>
    255a:	0f 92       	push	r0
    255c:	cd b7       	in	r28, 0x3d	; 61
    255e:	de b7       	in	r29, 0x3e	; 62
    2560:	89 83       	std	Y+1, r24	; 0x01
    2562:	6a 83       	std	Y+2, r22	; 0x02
    2564:	4b 83       	std	Y+3, r20	; 0x03

	GPIO_setupPinDirection( port_num,  pin_num, PIN_INPUT);
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	6a 81       	ldd	r22, Y+2	; 0x02
    256a:	40 e0       	ldi	r20, 0x00	; 0
    256c:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>

	if(DefualtInput == PULL_UP){
    2570:	8b 81       	ldd	r24, Y+3	; 0x03
    2572:	81 30       	cpi	r24, 0x01	; 1
    2574:	31 f4       	brne	.+12     	; 0x2582 <button_init+0x2e>
		GPIO_writePin( port_num,  pin_num, LOGIC_HIGH);
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	6a 81       	ldd	r22, Y+2	; 0x02
    257a:	41 e0       	ldi	r20, 0x01	; 1
    257c:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
    2580:	05 c0       	rjmp	.+10     	; 0x258c <button_init+0x38>
	}
	else
	{
		GPIO_writePin( port_num,  pin_num, LOGIC_LOW);
    2582:	89 81       	ldd	r24, Y+1	; 0x01
    2584:	6a 81       	ldd	r22, Y+2	; 0x02
    2586:	40 e0       	ldi	r20, 0x00	; 0
    2588:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
	}
}
    258c:	0f 90       	pop	r0
    258e:	0f 90       	pop	r0
    2590:	0f 90       	pop	r0
    2592:	cf 91       	pop	r28
    2594:	df 91       	pop	r29
    2596:	08 95       	ret

00002598 <read_button>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 read_button(uint8 port_num, uint8 pin_num){
    2598:	df 93       	push	r29
    259a:	cf 93       	push	r28
    259c:	00 d0       	rcall	.+0      	; 0x259e <read_button+0x6>
    259e:	0f 92       	push	r0
    25a0:	cd b7       	in	r28, 0x3d	; 61
    25a2:	de b7       	in	r29, 0x3e	; 62
    25a4:	8a 83       	std	Y+2, r24	; 0x02
    25a6:	6b 83       	std	Y+3, r22	; 0x03

	uint8 pin_value = LOGIC_LOW;
    25a8:	19 82       	std	Y+1, r1	; 0x01

	pin_value = GPIO_readPin( port_num,  pin_num);
    25aa:	8a 81       	ldd	r24, Y+2	; 0x02
    25ac:	6b 81       	ldd	r22, Y+3	; 0x03
    25ae:	0e 94 07 0c 	call	0x180e	; 0x180e <GPIO_readPin>
    25b2:	89 83       	std	Y+1, r24	; 0x01

	return pin_value;
    25b4:	89 81       	ldd	r24, Y+1	; 0x01

}
    25b6:	0f 90       	pop	r0
    25b8:	0f 90       	pop	r0
    25ba:	0f 90       	pop	r0
    25bc:	cf 91       	pop	r28
    25be:	df 91       	pop	r29
    25c0:	08 95       	ret

000025c2 <TC72_Init>:

#include "TC72.h"


void TC72_Init(unsigned char  mode)
{
    25c2:	df 93       	push	r29
    25c4:	cf 93       	push	r28
    25c6:	0f 92       	push	r0
    25c8:	cd b7       	in	r28, 0x3d	; 61
    25ca:	de b7       	in	r29, 0x3e	; 62
    25cc:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(PORTB_ID, PIN4_ID, LOGIC_HIGH);
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	64 e0       	ldi	r22, 0x04	; 4
    25d2:	41 e0       	ldi	r20, 0x01	; 1
    25d4:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
	SPI_sendReceiveByte(0x80);
    25d8:	80 e8       	ldi	r24, 0x80	; 128
    25da:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_sendReceiveByte>
	SPI_sendReceiveByte(mode);
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_sendReceiveByte>
	GPIO_writePin(PORTB_ID, PIN4_ID, LOGIC_LOW);
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	64 e0       	ldi	r22, 0x04	; 4
    25e8:	40 e0       	ldi	r20, 0x00	; 0
    25ea:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
}
    25ee:	0f 90       	pop	r0
    25f0:	cf 91       	pop	r28
    25f2:	df 91       	pop	r29
    25f4:	08 95       	ret

000025f6 <TC72_ReadTemp>:

unsigned char TC72_ReadTemp(void)
{
    25f6:	df 93       	push	r29
    25f8:	cf 93       	push	r28
    25fa:	0f 92       	push	r0
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62
	unsigned char data=0;
    2600:	19 82       	std	Y+1, r1	; 0x01
	GPIO_writePin(PORTB_ID, PIN4_ID, LOGIC_HIGH);
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	64 e0       	ldi	r22, 0x04	; 4
    2606:	41 e0       	ldi	r20, 0x01	; 1
    2608:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
	SPI_sendReceiveByte(0x02);
    260c:	82 e0       	ldi	r24, 0x02	; 2
    260e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_sendReceiveByte>
	data = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    2612:	8f ef       	ldi	r24, 0xFF	; 255
    2614:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_sendReceiveByte>
    2618:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(PORTB_ID, PIN4_ID, LOGIC_LOW);
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	64 e0       	ldi	r22, 0x04	; 4
    261e:	40 e0       	ldi	r20, 0x00	; 0
    2620:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
	return data;
    2624:	89 81       	ldd	r24, Y+1	; 0x01
}
    2626:	0f 90       	pop	r0
    2628:	cf 91       	pop	r28
    262a:	df 91       	pop	r29
    262c:	08 95       	ret

0000262e <accept_client_1>:
#include "client.h"
#include"../../MCAL/gpio/gpio.h"



void accept_client_1(void){
    262e:	df 93       	push	r29
    2630:	cf 93       	push	r28
    2632:	cd b7       	in	r28, 0x3d	; 61
    2634:	de b7       	in	r29, 0x3e	; 62

	if(GPIO_readPin(PORTC_ID, PIN1_ID)==GPIO_PIN_LEVEL_LOW)
    2636:	82 e0       	ldi	r24, 0x02	; 2
    2638:	61 e0       	ldi	r22, 0x01	; 1
    263a:	0e 94 07 0c 	call	0x180e	; 0x180e <GPIO_readPin>
    263e:	88 23       	and	r24, r24
    2640:	31 f4       	brne	.+12     	; 0x264e <accept_client_1+0x20>
	{
	GPIO_writePin(PORTC_ID, PIN1_ID,GPIO_PIN_LEVEL_HIGH);
    2642:	82 e0       	ldi	r24, 0x02	; 2
    2644:	61 e0       	ldi	r22, 0x01	; 1
    2646:	41 e0       	ldi	r20, 0x01	; 1
    2648:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
    264c:	05 c0       	rjmp	.+10     	; 0x2658 <accept_client_1+0x2a>
	}
	else
	{
	GPIO_writePin(PORTC_ID, PIN1_ID,GPIO_PIN_LEVEL_LOW);
    264e:	82 e0       	ldi	r24, 0x02	; 2
    2650:	61 e0       	ldi	r22, 0x01	; 1
    2652:	40 e0       	ldi	r20, 0x00	; 0
    2654:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
	}
}
    2658:	cf 91       	pop	r28
    265a:	df 91       	pop	r29
    265c:	08 95       	ret

0000265e <accept_client_2>:
#include "client.h"
#include"../../MCAL/gpio/gpio.h"



void accept_client_2(void){
    265e:	df 93       	push	r29
    2660:	cf 93       	push	r28
    2662:	cd b7       	in	r28, 0x3d	; 61
    2664:	de b7       	in	r29, 0x3e	; 62

	if(GPIO_readPin(PORTC_ID, PIN0_ID)==GPIO_PIN_LEVEL_LOW)
    2666:	82 e0       	ldi	r24, 0x02	; 2
    2668:	60 e0       	ldi	r22, 0x00	; 0
    266a:	0e 94 07 0c 	call	0x180e	; 0x180e <GPIO_readPin>
    266e:	88 23       	and	r24, r24
    2670:	31 f4       	brne	.+12     	; 0x267e <accept_client_2+0x20>
	{
	GPIO_writePin(PORTC_ID, PIN0_ID,GPIO_PIN_LEVEL_HIGH);
    2672:	82 e0       	ldi	r24, 0x02	; 2
    2674:	60 e0       	ldi	r22, 0x00	; 0
    2676:	41 e0       	ldi	r20, 0x01	; 1
    2678:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
    267c:	05 c0       	rjmp	.+10     	; 0x2688 <accept_client_2+0x2a>
	}
	else
	{
	GPIO_writePin(PORTC_ID, PIN0_ID,GPIO_PIN_LEVEL_LOW);
    267e:	82 e0       	ldi	r24, 0x02	; 2
    2680:	60 e0       	ldi	r22, 0x00	; 0
    2682:	40 e0       	ldi	r20, 0x00	; 0
    2684:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
	}
}
    2688:	cf 91       	pop	r28
    268a:	df 91       	pop	r29
    268c:	08 95       	ret

0000268e <subscribe>:

static char flag = 0;


void subscribe(void(*ptr)(void))
{
    268e:	df 93       	push	r29
    2690:	cf 93       	push	r28
    2692:	00 d0       	rcall	.+0      	; 0x2694 <subscribe+0x6>
    2694:	00 d0       	rcall	.+0      	; 0x2696 <subscribe+0x8>
    2696:	cd b7       	in	r28, 0x3d	; 61
    2698:	de b7       	in	r29, 0x3e	; 62
    269a:	9c 83       	std	Y+4, r25	; 0x04
    269c:	8b 83       	std	Y+3, r24	; 0x03
	for (int i=0 ; i<MAX_SUB;i++)
    269e:	1a 82       	std	Y+2, r1	; 0x02
    26a0:	19 82       	std	Y+1, r1	; 0x01
    26a2:	1c c0       	rjmp	.+56     	; 0x26dc <subscribe+0x4e>
	{
	        if (arr[i]==0)
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	9a 81       	ldd	r25, Y+2	; 0x02
    26a8:	88 0f       	add	r24, r24
    26aa:	99 1f       	adc	r25, r25
    26ac:	fc 01       	movw	r30, r24
    26ae:	e6 5f       	subi	r30, 0xF6	; 246
    26b0:	fe 4f       	sbci	r31, 0xFE	; 254
    26b2:	80 81       	ld	r24, Z
    26b4:	91 81       	ldd	r25, Z+1	; 0x01
    26b6:	00 97       	sbiw	r24, 0x00	; 0
    26b8:	61 f4       	brne	.+24     	; 0x26d2 <subscribe+0x44>
	        {
	            arr[i]=ptr;
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	9a 81       	ldd	r25, Y+2	; 0x02
    26be:	88 0f       	add	r24, r24
    26c0:	99 1f       	adc	r25, r25
    26c2:	fc 01       	movw	r30, r24
    26c4:	e6 5f       	subi	r30, 0xF6	; 246
    26c6:	fe 4f       	sbci	r31, 0xFE	; 254
    26c8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ca:	9c 81       	ldd	r25, Y+4	; 0x04
    26cc:	91 83       	std	Z+1, r25	; 0x01
    26ce:	80 83       	st	Z, r24
    26d0:	0a c0       	rjmp	.+20     	; 0x26e6 <subscribe+0x58>
static char flag = 0;


void subscribe(void(*ptr)(void))
{
	for (int i=0 ; i<MAX_SUB;i++)
    26d2:	89 81       	ldd	r24, Y+1	; 0x01
    26d4:	9a 81       	ldd	r25, Y+2	; 0x02
    26d6:	01 96       	adiw	r24, 0x01	; 1
    26d8:	9a 83       	std	Y+2, r25	; 0x02
    26da:	89 83       	std	Y+1, r24	; 0x01
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
    26de:	9a 81       	ldd	r25, Y+2	; 0x02
    26e0:	8a 30       	cpi	r24, 0x0A	; 10
    26e2:	91 05       	cpc	r25, r1
    26e4:	fc f2       	brlt	.-66     	; 0x26a4 <subscribe+0x16>
	            arr[i]=ptr;
	            break;
	        }
	    }

}
    26e6:	0f 90       	pop	r0
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
    26ec:	0f 90       	pop	r0
    26ee:	cf 91       	pop	r28
    26f0:	df 91       	pop	r29
    26f2:	08 95       	ret

000026f4 <unsubscribe>:

void unsubscribe(void(*ptr)(void))
{
    26f4:	df 93       	push	r29
    26f6:	cf 93       	push	r28
    26f8:	00 d0       	rcall	.+0      	; 0x26fa <unsubscribe+0x6>
    26fa:	00 d0       	rcall	.+0      	; 0x26fc <unsubscribe+0x8>
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
    2700:	9c 83       	std	Y+4, r25	; 0x04
    2702:	8b 83       	std	Y+3, r24	; 0x03
	for (int i=0 ; i<MAX_SUB;i++)
    2704:	1a 82       	std	Y+2, r1	; 0x02
    2706:	19 82       	std	Y+1, r1	; 0x01
    2708:	1c c0       	rjmp	.+56     	; 0x2742 <unsubscribe+0x4e>
	{
	        if (arr[i]==ptr)
    270a:	89 81       	ldd	r24, Y+1	; 0x01
    270c:	9a 81       	ldd	r25, Y+2	; 0x02
    270e:	88 0f       	add	r24, r24
    2710:	99 1f       	adc	r25, r25
    2712:	fc 01       	movw	r30, r24
    2714:	e6 5f       	subi	r30, 0xF6	; 246
    2716:	fe 4f       	sbci	r31, 0xFE	; 254
    2718:	20 81       	ld	r18, Z
    271a:	31 81       	ldd	r19, Z+1	; 0x01
    271c:	8b 81       	ldd	r24, Y+3	; 0x03
    271e:	9c 81       	ldd	r25, Y+4	; 0x04
    2720:	28 17       	cp	r18, r24
    2722:	39 07       	cpc	r19, r25
    2724:	49 f4       	brne	.+18     	; 0x2738 <unsubscribe+0x44>
	        {
	            arr[i]=0;
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	9a 81       	ldd	r25, Y+2	; 0x02
    272a:	88 0f       	add	r24, r24
    272c:	99 1f       	adc	r25, r25
    272e:	fc 01       	movw	r30, r24
    2730:	e6 5f       	subi	r30, 0xF6	; 246
    2732:	fe 4f       	sbci	r31, 0xFE	; 254
    2734:	11 82       	std	Z+1, r1	; 0x01
    2736:	10 82       	st	Z, r1

}

void unsubscribe(void(*ptr)(void))
{
	for (int i=0 ; i<MAX_SUB;i++)
    2738:	89 81       	ldd	r24, Y+1	; 0x01
    273a:	9a 81       	ldd	r25, Y+2	; 0x02
    273c:	01 96       	adiw	r24, 0x01	; 1
    273e:	9a 83       	std	Y+2, r25	; 0x02
    2740:	89 83       	std	Y+1, r24	; 0x01
    2742:	89 81       	ldd	r24, Y+1	; 0x01
    2744:	9a 81       	ldd	r25, Y+2	; 0x02
    2746:	8a 30       	cpi	r24, 0x0A	; 10
    2748:	91 05       	cpc	r25, r1
    274a:	fc f2       	brlt	.-66     	; 0x270a <unsubscribe+0x16>
	            arr[i]=0;

	        }
	    }

}
    274c:	0f 90       	pop	r0
    274e:	0f 90       	pop	r0
    2750:	0f 90       	pop	r0
    2752:	0f 90       	pop	r0
    2754:	cf 91       	pop	r28
    2756:	df 91       	pop	r29
    2758:	08 95       	ret

0000275a <notify>:

void notify()
{
    275a:	df 93       	push	r29
    275c:	cf 93       	push	r28
    275e:	00 d0       	rcall	.+0      	; 0x2760 <notify+0x6>
    2760:	cd b7       	in	r28, 0x3d	; 61
    2762:	de b7       	in	r29, 0x3e	; 62

	if(flag==1)
    2764:	80 91 1e 01 	lds	r24, 0x011E
    2768:	81 30       	cpi	r24, 0x01	; 1
    276a:	29 f5       	brne	.+74     	; 0x27b6 <notify+0x5c>
	{
	flag = 0;
    276c:	10 92 1e 01 	sts	0x011E, r1
	for (int i=0 ; i<MAX_SUB;i++)
    2770:	1a 82       	std	Y+2, r1	; 0x02
    2772:	19 82       	std	Y+1, r1	; 0x01
    2774:	1b c0       	rjmp	.+54     	; 0x27ac <notify+0x52>
	{
		if (arr[i]!=0)
    2776:	89 81       	ldd	r24, Y+1	; 0x01
    2778:	9a 81       	ldd	r25, Y+2	; 0x02
    277a:	88 0f       	add	r24, r24
    277c:	99 1f       	adc	r25, r25
    277e:	fc 01       	movw	r30, r24
    2780:	e6 5f       	subi	r30, 0xF6	; 246
    2782:	fe 4f       	sbci	r31, 0xFE	; 254
    2784:	80 81       	ld	r24, Z
    2786:	91 81       	ldd	r25, Z+1	; 0x01
    2788:	00 97       	sbiw	r24, 0x00	; 0
    278a:	59 f0       	breq	.+22     	; 0x27a2 <notify+0x48>
		{
			arr[i]();
    278c:	89 81       	ldd	r24, Y+1	; 0x01
    278e:	9a 81       	ldd	r25, Y+2	; 0x02
    2790:	88 0f       	add	r24, r24
    2792:	99 1f       	adc	r25, r25
    2794:	fc 01       	movw	r30, r24
    2796:	e6 5f       	subi	r30, 0xF6	; 246
    2798:	fe 4f       	sbci	r31, 0xFE	; 254
    279a:	01 90       	ld	r0, Z+
    279c:	f0 81       	ld	r31, Z
    279e:	e0 2d       	mov	r30, r0
    27a0:	09 95       	icall
{

	if(flag==1)
	{
	flag = 0;
	for (int i=0 ; i<MAX_SUB;i++)
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	9a 81       	ldd	r25, Y+2	; 0x02
    27a6:	01 96       	adiw	r24, 0x01	; 1
    27a8:	9a 83       	std	Y+2, r25	; 0x02
    27aa:	89 83       	std	Y+1, r24	; 0x01
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
    27ae:	9a 81       	ldd	r25, Y+2	; 0x02
    27b0:	8a 30       	cpi	r24, 0x0A	; 10
    27b2:	91 05       	cpc	r25, r1
    27b4:	04 f3       	brlt	.-64     	; 0x2776 <notify+0x1c>
	}
	}
	else
	{}

	}
    27b6:	0f 90       	pop	r0
    27b8:	0f 90       	pop	r0
    27ba:	cf 91       	pop	r28
    27bc:	df 91       	pop	r29
    27be:	08 95       	ret

000027c0 <__vector_1>:


ISR(INT0_vect)
{
    27c0:	1f 92       	push	r1
    27c2:	0f 92       	push	r0
    27c4:	0f b6       	in	r0, 0x3f	; 63
    27c6:	0f 92       	push	r0
    27c8:	11 24       	eor	r1, r1
    27ca:	8f 93       	push	r24
    27cc:	df 93       	push	r29
    27ce:	cf 93       	push	r28
    27d0:	cd b7       	in	r28, 0x3d	; 61
    27d2:	de b7       	in	r29, 0x3e	; 62
	flag=1;
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	80 93 1e 01 	sts	0x011E, r24
}
    27da:	cf 91       	pop	r28
    27dc:	df 91       	pop	r29
    27de:	8f 91       	pop	r24
    27e0:	0f 90       	pop	r0
    27e2:	0f be       	out	0x3f, r0	; 63
    27e4:	0f 90       	pop	r0
    27e6:	1f 90       	pop	r1
    27e8:	18 95       	reti

000027ea <observer_task>:
#include "app.h"


void observer_task(void)
{
    27ea:	df 93       	push	r29
    27ec:	cf 93       	push	r28
    27ee:	cd b7       	in	r28, 0x3d	; 61
    27f0:	de b7       	in	r29, 0x3e	; 62
	GLOBAL_INTERRUPT_ENABLE();
    27f2:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <GLOBAL_INTERRUPT_ENABLE>
	INT0_init(RISING_EDGE_TRIGGER,PIN_INPUT);
    27f6:	83 e0       	ldi	r24, 0x03	; 3
    27f8:	60 e0       	ldi	r22, 0x00	; 0
    27fa:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <INT0_init>

	GPIO_setupPinDirection(PORTC_ID, PIN1_ID, PIN_OUTPUT);
    27fe:	82 e0       	ldi	r24, 0x02	; 2
    2800:	61 e0       	ldi	r22, 0x01	; 1
    2802:	41 e0       	ldi	r20, 0x01	; 1
    2804:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, PIN0_ID, PIN_OUTPUT);
    2808:	82 e0       	ldi	r24, 0x02	; 2
    280a:	60 e0       	ldi	r22, 0x00	; 0
    280c:	41 e0       	ldi	r20, 0x01	; 1
    280e:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>


	subscribe(accept_client_1);
    2812:	87 e1       	ldi	r24, 0x17	; 23
    2814:	93 e1       	ldi	r25, 0x13	; 19
    2816:	0e 94 47 13 	call	0x268e	; 0x268e <subscribe>
	subscribe(accept_client_2);
    281a:	8f e2       	ldi	r24, 0x2F	; 47
    281c:	93 e1       	ldi	r25, 0x13	; 19
    281e:	0e 94 47 13 	call	0x268e	; 0x268e <subscribe>

	unsubscribe(accept_client_1);
    2822:	87 e1       	ldi	r24, 0x17	; 23
    2824:	93 e1       	ldi	r25, 0x13	; 19
    2826:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <unsubscribe>

	subscribe(accept_client_1);
    282a:	87 e1       	ldi	r24, 0x17	; 23
    282c:	93 e1       	ldi	r25, 0x13	; 19
    282e:	0e 94 47 13 	call	0x268e	; 0x268e <subscribe>

	while(1)
	{
		notify();
    2832:	0e 94 ad 13 	call	0x275a	; 0x275a <notify>
    2836:	fd cf       	rjmp	.-6      	; 0x2832 <observer_task+0x48>

00002838 <main>:

#include "APP/app.h"

int main(int argc, char **argv);

int main(int argc, char **argv) {
    2838:	df 93       	push	r29
    283a:	cf 93       	push	r28
    283c:	00 d0       	rcall	.+0      	; 0x283e <main+0x6>
    283e:	00 d0       	rcall	.+0      	; 0x2840 <main+0x8>
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    2844:	9a 83       	std	Y+2, r25	; 0x02
    2846:	89 83       	std	Y+1, r24	; 0x01
    2848:	7c 83       	std	Y+4, r23	; 0x04
    284a:	6b 83       	std	Y+3, r22	; 0x03

//app_init();
//app_start();

observer_task();
    284c:	0e 94 f5 13 	call	0x27ea	; 0x27ea <observer_task>


return 0;
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	90 e0       	ldi	r25, 0x00	; 0
}
    2854:	0f 90       	pop	r0
    2856:	0f 90       	pop	r0
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	cf 91       	pop	r28
    285e:	df 91       	pop	r29
    2860:	08 95       	ret

00002862 <__prologue_saves__>:
    2862:	2f 92       	push	r2
    2864:	3f 92       	push	r3
    2866:	4f 92       	push	r4
    2868:	5f 92       	push	r5
    286a:	6f 92       	push	r6
    286c:	7f 92       	push	r7
    286e:	8f 92       	push	r8
    2870:	9f 92       	push	r9
    2872:	af 92       	push	r10
    2874:	bf 92       	push	r11
    2876:	cf 92       	push	r12
    2878:	df 92       	push	r13
    287a:	ef 92       	push	r14
    287c:	ff 92       	push	r15
    287e:	0f 93       	push	r16
    2880:	1f 93       	push	r17
    2882:	cf 93       	push	r28
    2884:	df 93       	push	r29
    2886:	cd b7       	in	r28, 0x3d	; 61
    2888:	de b7       	in	r29, 0x3e	; 62
    288a:	ca 1b       	sub	r28, r26
    288c:	db 0b       	sbc	r29, r27
    288e:	0f b6       	in	r0, 0x3f	; 63
    2890:	f8 94       	cli
    2892:	de bf       	out	0x3e, r29	; 62
    2894:	0f be       	out	0x3f, r0	; 63
    2896:	cd bf       	out	0x3d, r28	; 61
    2898:	09 94       	ijmp

0000289a <__epilogue_restores__>:
    289a:	2a 88       	ldd	r2, Y+18	; 0x12
    289c:	39 88       	ldd	r3, Y+17	; 0x11
    289e:	48 88       	ldd	r4, Y+16	; 0x10
    28a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    28a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    28a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    28a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    28a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    28aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    28ac:	b9 84       	ldd	r11, Y+9	; 0x09
    28ae:	c8 84       	ldd	r12, Y+8	; 0x08
    28b0:	df 80       	ldd	r13, Y+7	; 0x07
    28b2:	ee 80       	ldd	r14, Y+6	; 0x06
    28b4:	fd 80       	ldd	r15, Y+5	; 0x05
    28b6:	0c 81       	ldd	r16, Y+4	; 0x04
    28b8:	1b 81       	ldd	r17, Y+3	; 0x03
    28ba:	aa 81       	ldd	r26, Y+2	; 0x02
    28bc:	b9 81       	ldd	r27, Y+1	; 0x01
    28be:	ce 0f       	add	r28, r30
    28c0:	d1 1d       	adc	r29, r1
    28c2:	0f b6       	in	r0, 0x3f	; 63
    28c4:	f8 94       	cli
    28c6:	de bf       	out	0x3e, r29	; 62
    28c8:	0f be       	out	0x3f, r0	; 63
    28ca:	cd bf       	out	0x3d, r28	; 61
    28cc:	ed 01       	movw	r28, r26
    28ce:	08 95       	ret

000028d0 <itoa>:
    28d0:	fb 01       	movw	r30, r22
    28d2:	9f 01       	movw	r18, r30
    28d4:	e8 94       	clt
    28d6:	42 30       	cpi	r20, 0x02	; 2
    28d8:	c4 f0       	brlt	.+48     	; 0x290a <itoa+0x3a>
    28da:	45 32       	cpi	r20, 0x25	; 37
    28dc:	b4 f4       	brge	.+44     	; 0x290a <itoa+0x3a>
    28de:	4a 30       	cpi	r20, 0x0A	; 10
    28e0:	29 f4       	brne	.+10     	; 0x28ec <itoa+0x1c>
    28e2:	97 fb       	bst	r25, 7
    28e4:	1e f4       	brtc	.+6      	; 0x28ec <itoa+0x1c>
    28e6:	90 95       	com	r25
    28e8:	81 95       	neg	r24
    28ea:	9f 4f       	sbci	r25, 0xFF	; 255
    28ec:	64 2f       	mov	r22, r20
    28ee:	77 27       	eor	r23, r23
    28f0:	0e 94 99 14 	call	0x2932	; 0x2932 <__udivmodhi4>
    28f4:	80 5d       	subi	r24, 0xD0	; 208
    28f6:	8a 33       	cpi	r24, 0x3A	; 58
    28f8:	0c f0       	brlt	.+2      	; 0x28fc <itoa+0x2c>
    28fa:	89 5d       	subi	r24, 0xD9	; 217
    28fc:	81 93       	st	Z+, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	00 97       	sbiw	r24, 0x00	; 0
    2902:	a1 f7       	brne	.-24     	; 0x28ec <itoa+0x1c>
    2904:	16 f4       	brtc	.+4      	; 0x290a <itoa+0x3a>
    2906:	5d e2       	ldi	r21, 0x2D	; 45
    2908:	51 93       	st	Z+, r21
    290a:	10 82       	st	Z, r1
    290c:	c9 01       	movw	r24, r18
    290e:	0c 94 89 14 	jmp	0x2912	; 0x2912 <strrev>

00002912 <strrev>:
    2912:	dc 01       	movw	r26, r24
    2914:	fc 01       	movw	r30, r24
    2916:	67 2f       	mov	r22, r23
    2918:	71 91       	ld	r23, Z+
    291a:	77 23       	and	r23, r23
    291c:	e1 f7       	brne	.-8      	; 0x2916 <strrev+0x4>
    291e:	32 97       	sbiw	r30, 0x02	; 2
    2920:	04 c0       	rjmp	.+8      	; 0x292a <strrev+0x18>
    2922:	7c 91       	ld	r23, X
    2924:	6d 93       	st	X+, r22
    2926:	70 83       	st	Z, r23
    2928:	62 91       	ld	r22, -Z
    292a:	ae 17       	cp	r26, r30
    292c:	bf 07       	cpc	r27, r31
    292e:	c8 f3       	brcs	.-14     	; 0x2922 <strrev+0x10>
    2930:	08 95       	ret

00002932 <__udivmodhi4>:
    2932:	aa 1b       	sub	r26, r26
    2934:	bb 1b       	sub	r27, r27
    2936:	51 e1       	ldi	r21, 0x11	; 17
    2938:	07 c0       	rjmp	.+14     	; 0x2948 <__udivmodhi4_ep>

0000293a <__udivmodhi4_loop>:
    293a:	aa 1f       	adc	r26, r26
    293c:	bb 1f       	adc	r27, r27
    293e:	a6 17       	cp	r26, r22
    2940:	b7 07       	cpc	r27, r23
    2942:	10 f0       	brcs	.+4      	; 0x2948 <__udivmodhi4_ep>
    2944:	a6 1b       	sub	r26, r22
    2946:	b7 0b       	sbc	r27, r23

00002948 <__udivmodhi4_ep>:
    2948:	88 1f       	adc	r24, r24
    294a:	99 1f       	adc	r25, r25
    294c:	5a 95       	dec	r21
    294e:	a9 f7       	brne	.-22     	; 0x293a <__udivmodhi4_loop>
    2950:	80 95       	com	r24
    2952:	90 95       	com	r25
    2954:	bc 01       	movw	r22, r24
    2956:	cd 01       	movw	r24, r26
    2958:	08 95       	ret

0000295a <_exit>:
    295a:	f8 94       	cli

0000295c <__stop_program>:
    295c:	ff cf       	rjmp	.-2      	; 0x295c <__stop_program>
